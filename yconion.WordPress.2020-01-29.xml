<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.3.2" created="2020-01-29 13:45" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>yconion的个人博客</title>
	<link>http://114.116.235.65</link>
	<description>破手杖，破袈裟，一个小破碗，还有一个小破人，他去了西天</description>
	<pubDate>Wed, 29 Jan 2020 13:45:04 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://114.116.235.65</wp:base_site_url>
	<wp:base_blog_url>http://114.116.235.65</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[yconion]]></wp:author_login><wp:author_email><![CDATA[1955026632@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[yconion]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[cppbase]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[c++基础]]></wp:cat_name>
<wp:category_description><![CDATA[c++基础学习]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[git]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[git]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[linuxlite]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[linux内核]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[数据结构]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[数据结构类型题]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>51</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e7%bb%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[数组]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[杂项]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>52</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a0%88]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[栈]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>55</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[树]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[yuanma]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[源码刨析]]></wp:cat_name>
<wp:category_description><![CDATA[作为今后分析源码文章存放地]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[算法]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[网络编程]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[计算机网络]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>53</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%93%be%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[链表]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>54</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%98%9f%e5%88%97]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[队列]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[动态规划]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>56</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9b%be]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[图]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>27</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[图论]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>26</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[基础技巧]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>57</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%a0%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[堆]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[排序算法]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[搜索算法]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>58</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%a3%e5%88%97%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:category_parent>
		<wp:cat_name><![CDATA[散列表]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>42</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:category_parent>
		<wp:cat_name><![CDATA[最小生成树]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>41</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9c%80%e7%9f%ad%e8%b7%af]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:category_parent>
		<wp:cat_name><![CDATA[最短路]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>45</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%9c%80%e9%95%bf%e5%ad%90%e5%ba%8f%e5%88%97]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:category_parent>
		<wp:cat_name><![CDATA[最长子序列]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[稳定的]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>43</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%bd%91%e7%bb%9c%e6%b5%81%e5%bb%ba%e6%a8%a1]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:category_parent>
		<wp:cat_name><![CDATA[网络流建模]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>44</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:category_parent>
		<wp:cat_name><![CDATA[背包问题]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>46</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%ae%a1%e6%95%b0%e9%97%ae%e9%a2%98]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:category_parent>
		<wp:cat_name><![CDATA[计数问题]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>50</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:category_parent>
		<wp:cat_name><![CDATA[贪心]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>39</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%80%92%e5%bd%92]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[递归]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[不稳定的]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>49</wp:term_id>
		<wp:category_nicename><![CDATA[%e4%ba%8c%e5%88%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:category_parent>
		<wp:cat_name><![CDATA[二分]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>48</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%80%8d%e5%a2%9e]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:category_parent>
		<wp:cat_name><![CDATA[倍增]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[冒泡排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>47</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%88%86%e6%b2%bb]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:category_parent>
		<wp:cat_name><![CDATA[分治]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>40</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%89%aa%e6%9e%9d]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[剪枝]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>38</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9b%9e%e6%ba%af]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[回溯]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>33</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[基数排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%a0%86%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[堆排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>36</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%b8%8c%e5%b0%94%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[希尔排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[归并排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>35</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[快速排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[插入排序]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>34</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:category_parent>
		<wp:cat_name><![CDATA[选择排序]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[cppbass]]></wp:tag_slug>
		<wp:tag_name><![CDATA[c++基础]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[linuxlite]]></wp:tag_slug>
		<wp:tag_name><![CDATA[linux内核]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[tcp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[TCP]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[yuanma]]></wp:tag_slug>
		<wp:tag_name><![CDATA[源码分析]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[计算机网络]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cppbase]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c++基础]]></wp:term_name>
		<wp:term_description><![CDATA[c++基础学习]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cppbass]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c++基础]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[git]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linuxlite]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[linux内核]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linuxlite]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[linux内核]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tcp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[TCP]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%88%86%e7%b1%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分类]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据结构]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据结构类型题]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e7%bb%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[数组]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[杂项]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[栈]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[树]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yuanma]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[源码分析]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yuanma]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[源码刨析]]></wp:term_name>
		<wp:term_description><![CDATA[作为今后分析源码文章存放地]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[网络编程]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%8f%9c%e5%8d%95%e5%af%bc%e8%88%aa]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[菜单导航]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[计算机网络]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[计算机网络]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[链表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%98%9f%e5%88%97]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[队列]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[动态规划]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9b%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[图]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[图论]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[基础技巧]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a0%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[堆]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[排序算法]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[搜索算法]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%a3%e5%88%97%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e7%b1%bb%e5%9e%8b%e9%a2%98]]></wp:term_parent>
		<wp:term_name><![CDATA[散列表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%80%e5%b0%8f%e7%94%9f%e6%88%90%e6%a0%91]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:term_parent>
		<wp:term_name><![CDATA[最小生成树]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%80%e7%9f%ad%e8%b7%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:term_parent>
		<wp:term_name><![CDATA[最短路]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%9c%80%e9%95%bf%e5%ad%90%e5%ba%8f%e5%88%97]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:term_parent>
		<wp:term_name><![CDATA[最长子序列]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[稳定的]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%bd%91%e7%bb%9c%e6%b5%81%e5%bb%ba%e6%a8%a1]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9b%be%e8%ae%ba]]></wp:term_parent>
		<wp:term_name><![CDATA[网络流建模]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%83%8c%e5%8c%85%e9%97%ae%e9%a2%98]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:term_parent>
		<wp:term_name><![CDATA[背包问题]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%a1%e6%95%b0%e9%97%ae%e9%a2%98]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:term_parent>
		<wp:term_name><![CDATA[计数问题]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b4%aa%e5%bf%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:term_parent>
		<wp:term_name><![CDATA[贪心]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%80%92%e5%bd%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[递归]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[不稳定的]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%ba%8c%e5%88%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:term_parent>
		<wp:term_name><![CDATA[二分]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%80%8d%e5%a2%9e]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:term_parent>
		<wp:term_name><![CDATA[倍增]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[冒泡排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%88%86%e6%b2%bb]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%9f%ba%e7%a1%80%e6%8a%80%e5%b7%a7]]></wp:term_parent>
		<wp:term_name><![CDATA[分治]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%89%aa%e6%9e%9d]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[剪枝]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9b%9e%e6%ba%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e6%90%9c%e7%b4%a2%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[回溯]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[基数排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%a0%86%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[堆排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b8%8c%e5%b0%94%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[希尔排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[归并排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[快速排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[插入排序]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%8d%e7%a8%b3%e5%ae%9a%e7%9a%84]]></wp:term_parent>
		<wp:term_name><![CDATA[选择排序]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>13</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e8%8f%9c%e5%8d%95%e5%af%bc%e8%88%aa]]></wp:term_slug><wp:term_name><![CDATA[菜单导航]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.3.2</generator>

<image>
	<url>http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-32x32.jpg</url>
	<title>yconion的个人博客</title>
	<link>http://114.116.235.65</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title>2</title>
		<link>http://114.116.235.65/2</link>
		<pubDate>Sat, 30 Nov 2019 02:53:37 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 10:53:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 02:53:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/2-e1575082437969.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/2-e1575082437969.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1271;s:6:"height";i:658;s:4:"file";s:28:"2019/11/2-e1575082437969.jpg";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:28:"2-e1575082437969-300x155.jpg";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:29:"2-e1575082437969-1024x530.jpg";s:5:"width";i:1024;s:6:"height";i:530;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"2-e1575082437969-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:23:"ivanicof-featured-image";a:4:{s:4:"file";s:29:"2-e1575082437969-1271x600.jpg";s:5:"width";i:1271;s:6:"height";i:600;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:28:"2-e1575082437969-768x398.jpg";s:5:"width";i:768;s:6:"height";i:398;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:9:"full-orig";a:3:{s:5:"width";i:658;s:6:"height";i:1271;s:4:"file";s:5:"2.jpg";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:13:"2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:11:"medium-orig";a:4:{s:4:"file";s:13:"2-155x300.jpg";s:5:"width";i:155;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:10:"large-orig";a:4:{s:4:"file";s:14:"2-530x1024.jpg";s:5:"width";i:530;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:28:"ivanicof-featured-image-orig";a:4:{s:4:"file";s:13:"2-658x600.jpg";s:5:"width";i:658;s:6:"height";i:600;s:9:"mime-type";s:10:"image/jpeg";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-2-e1575082437969.jpg</title>
		<link>http://114.116.235.65/cropped-2-e1575082437969-jpg</link>
		<pubDate>Sat, 30 Nov 2019 02:56:45 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 10:56:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 02:56:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-2-e1575082437969-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-2-e1575082437969.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1000;s:6:"height";i:531;s:4:"file";s:36:"2019/11/cropped-2-e1575082437969.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:36:"cropped-2-e1575082437969-300x159.jpg";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"cropped-2-e1575082437969-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:36:"cropped-2-e1575082437969-768x408.jpg";s:5:"width";i:768;s:6:"height";i:408;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:23;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_ivanicof]]></wp:meta_key>
		<wp:meta_value><![CDATA[1575082605]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[ivanicof]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-2-e1575082437969-1.jpg</title>
		<link>http://114.116.235.65/cropped-2-e1575082437969-1-jpg</link>
		<pubDate>Sat, 30 Nov 2019 03:05:51 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 11:05:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 03:05:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-2-e1575082437969-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-2-e1575082437969-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1271;s:6:"height";i:617;s:4:"file";s:38:"2019/11/cropped-2-e1575082437969-1.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:38:"cropped-2-e1575082437969-1-300x146.jpg";s:5:"width";i:300;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:39:"cropped-2-e1575082437969-1-1024x497.jpg";s:5:"width";i:1024;s:6:"height";i:497;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"cropped-2-e1575082437969-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:38:"cropped-2-e1575082437969-1-768x373.jpg";s:5:"width";i:768;s:6:"height";i:373;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:23;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_navolio-light]]></wp:meta_key>
		<wp:meta_value><![CDATA[1575083159]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[navolio-light]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-2-e1575082437969-2.jpg</title>
		<link>http://114.116.235.65/cropped-2-e1575082437969-2-jpg</link>
		<pubDate>Sat, 30 Nov 2019 03:08:38 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969-2.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 11:08:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 03:08:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-2-e1575082437969-2-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-2-e1575082437969-2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-2-e1575082437969-2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1271;s:6:"height";i:294;s:4:"file";s:38:"2019/11/cropped-2-e1575082437969-2.jpg";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:37:"cropped-2-e1575082437969-2-300x69.jpg";s:5:"width";i:300;s:6:"height";i:69;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:39:"cropped-2-e1575082437969-2-1024x237.jpg";s:5:"width";i:1024;s:6:"height";i:237;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"cropped-2-e1575082437969-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:38:"cropped-2-e1575082437969-2-768x178.jpg";s:5:"width";i:768;s:6:"height";i:178;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-yconion.jpg</title>
		<link>http://114.116.235.65/cropped-yconion-jpg</link>
		<pubDate>Sat, 30 Nov 2019 03:12:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 11:12:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 03:12:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-yconion-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-yconion.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:27:"2019/11/cropped-yconion.jpg";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:27:"cropped-yconion-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:27:"cropped-yconion-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:27:"cropped-yconion-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:27:"cropped-yconion-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:27:"cropped-yconion-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:25:"cropped-yconion-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-yconion-1.jpg</title>
		<link>http://114.116.235.65/cropped-yconion-1-jpg</link>
		<pubDate>Sat, 30 Nov 2019 03:13:23 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-1.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 11:13:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 03:13:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-yconion-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-yconion-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:29:"2019/11/cropped-yconion-1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:29:"cropped-yconion-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:29:"cropped-yconion-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-yconion-e1575083836284.jpg</title>
		<link>http://114.116.235.65/cropped-yconion-e1575083836284-jpg</link>
		<pubDate>Sat, 30 Nov 2019 03:18:44 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-e1575083836284.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-e1575083836284.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 11:18:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 03:18:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-yconion-e1575083836284-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-e1575083836284.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-yconion-e1575083836284.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-logo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:42:"2019/11/cropped-yconion-e1575083836284.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:42:"cropped-yconion-e1575083836284-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:42:"cropped-yconion-e1575083836284-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>yconion</title>
		<link>http://114.116.235.65/yconion-2</link>
		<pubDate>Sat, 30 Nov 2019 09:55:50 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/yconion-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 17:55:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 09:55:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[yconion-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/yconion-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/yconion-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:21:"2019/11/yconion-1.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:21:"yconion-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:21:"yconion-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20190729081217</title>
		<link>http://114.116.235.65/qq%e5%9b%be%e7%89%8720190729081217</link>
		<pubDate>Sat, 30 Nov 2019 10:03:56 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/QQ图片20190729081217.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:03:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:03:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720190729081217]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/QQ图片20190729081217.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/QQ图片20190729081217.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:639;s:4:"file";s:34:"2019/11/QQ图片20190729081217.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20190729081217-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20190729081217-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>tianjie</title>
		<link>http://114.116.235.65/tianjie</link>
		<pubDate>Sat, 30 Nov 2019 10:36:10 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/tianjie.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:36:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:36:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tianjie]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/tianjie.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/tianjie.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:230;s:6:"height";i:140;s:4:"file";s:19:"2019/11/tianjie.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"tianjie-150x140.jpg";s:5:"width";i:150;s:6:"height";i:140;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>xiaowu</title>
		<link>http://114.116.235.65/xiaowu</link>
		<pubDate>Sat, 30 Nov 2019 10:36:11 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/xiaowu.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[在这东海水木涯，没有我无尘断不了的刀]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:36:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:36:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[xiaowu]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/xiaowu.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/xiaowu.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:658;s:6:"height";i:274;s:4:"file";s:18:"2019/11/xiaowu.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"xiaowu-300x125.jpg";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"xiaowu-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[hmj-blog]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>yourname</title>
		<link>http://114.116.235.65/yourname</link>
		<pubDate>Sat, 30 Nov 2019 10:36:11 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/yourname.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[是否，我们都在某一个过去错过了谁]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:36:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:36:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[yourname]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/yourname.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/yourname.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:529;s:6:"height";i:300;s:4:"file";s:20:"2019/11/yourname.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:20:"yourname-300x170.jpg";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:20:"yourname-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[lordsir]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>guidao</title>
		<link>http://114.116.235.65/guidao</link>
		<pubDate>Sat, 30 Nov 2019 10:36:50 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/guidao.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:36:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:36:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[guidao]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/guidao.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/guidao.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:338;s:6:"height";i:220;s:4:"file";s:18:"2019/11/guidao.jpg";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:18:"guidao-300x195.jpg";s:5:"width";i:300;s:6:"height";i:195;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"guidao-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[等待]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>log</title>
		<link>http://114.116.235.65/?attachment_id=121</link>
		<pubDate>Wed, 04 Dec 2019 08:15:31 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/log.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2019-12-04 16:15:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-04 08:15:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[log]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/log-e1578495932858.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/log-e1578495932858.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:190;s:6:"height";i:60;s:4:"file";s:30:"2019/12/log-e1578495932858.png";s:5:"sizes";a:2:{s:6:"medium";a:4:{s:4:"file";s:15:"log-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:29:"log-e1575464129626-150x87.png";s:5:"width";i:150;s:6:"height";i:87;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:4:{s:9:"full-orig";a:3:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:7:"log.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:15:"log-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:15:"log-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:18:"full-1578495932858";a:3:{s:5:"width";i:275;s:6:"height";i:87;s:4:"file";s:22:"log-e1575464129626.png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>云 灯塔 火车 大海 森林 日出 绘画 4k壁纸3840x2160_彼岸图网</title>
		<link>http://114.116.235.65/%e4%ba%91-%e7%81%af%e5%a1%94-%e7%81%ab%e8%bd%a6-%e5%a4%a7%e6%b5%b7-%e6%a3%ae%e6%9e%97-%e6%97%a5%e5%87%ba-%e7%bb%98%e7%94%bb-4k%e5%a3%81%e7%ba%b83840x2160_%e5%bd%bc%e5%b2%b8%e5%9b%be%e7%bd%91</link>
		<pubDate>Thu, 05 Dec 2019 12:29:31 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2019-12-05 20:29:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-05 12:29:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%91-%e7%81%af%e5%a1%94-%e7%81%ab%e8%bd%a6-%e5%a4%a7%e6%b5%b7-%e6%a3%ae%e6%9e%97-%e6%97%a5%e5%87%ba-%e7%bb%98%e7%94%bb-4k%e5%a3%81%e7%ba%b83840x2160_%e5%bd%bc%e5%b2%b8%e5%9b%be%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-scaled.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-scaled.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2560;s:6:"height";i:1440;s:4:"file";s:95:"2019/12/云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-scaled.jpg";s:5:"sizes";a:7:{s:6:"medium";a:4:{s:4:"file";s:88:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:89:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:88:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:88:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:9:"1536x1536";a:4:{s:4:"file";s:89:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-1536x864.jpg";s:5:"width";i:1536;s:6:"height";i:864;s:9:"mime-type";s:10:"image/jpeg";}s:9:"2048x2048";a:4:{s:4:"file";s:90:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-2048x1152.jpg";s:5:"width";i:2048;s:6:"height";i:1152;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:88:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网-624x351.jpg";s:5:"width";i:624;s:6:"height";i:351;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:14:"original_image";s:80:"云-灯塔-火车-大海-森林-日出-绘画-4k壁纸3840x2160_彼岸图网.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[dmeng-wordpress-theme-master]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-log-e1575464129626.png</title>
		<link>http://114.116.235.65/cropped-log-e1575464129626-png</link>
		<pubDate>Sun, 29 Dec 2019 06:22:49 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/cropped-log-e1575464129626.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 14:22:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 06:22:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-log-e1575464129626-png]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/cropped-log-e1575464129626.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/cropped-log-e1575464129626.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:87;s:6:"height";i:87;s:4:"file";s:38:"2019/12/cropped-log-e1575464129626.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:121;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_dmeng-wordpress-theme-master]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577600569]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[dmeng-wordpress-theme-master]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-yconion-1-1.jpg</title>
		<link>http://114.116.235.65/cropped-yconion-1-1-jpg</link>
		<pubDate>Sun, 29 Dec 2019 06:22:58 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-1-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 14:22:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 06:22:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-yconion-1-1-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-yconion-1-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-yconion-1-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:640;s:4:"file";s:31:"2019/11/cropped-yconion-1-1.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:31:"cropped-yconion-1-1-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:31:"cropped-yconion-1-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"cropped-yconion-1-1-140x98.jpg";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:72;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_dmeng-wordpress-theme-master]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577600579]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[dmeng-wordpress-theme-master]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cropped-QQ图片20190729081217.jpg</title>
		<link>http://114.116.235.65/cropped-qq%e5%9b%be%e7%89%8720190729081217-jpg</link>
		<pubDate>Sun, 29 Dec 2019 06:23:23 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/11/cropped-QQ图片20190729081217.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 14:23:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 06:23:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-qq%e5%9b%be%e7%89%8720190729081217-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/11/cropped-QQ图片20190729081217.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/cropped-QQ图片20190729081217.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:212;s:6:"height";i:122;s:4:"file";s:42:"2019/11/cropped-QQ图片20190729081217.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"cropped-QQ图片20190729081217-150x122.jpg";s:5:"width";i:150;s:6:"height";i:122;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:41:"cropped-QQ图片20190729081217-140x98.jpg";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:17:"attachment_parent";i:77;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_custom_header_last_used_dmeng-wordpress-theme-master]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577600603]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_header]]></wp:meta_key>
		<wp:meta_value><![CDATA[dmeng-wordpress-theme-master]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1639597-20190406113434223-2039183858</title>
		<link>http://114.116.235.65/1639597-20190406113434223-2039183858</link>
		<pubDate>Mon, 30 Dec 2019 10:38:46 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date><![CDATA[2019-12-30 18:38:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-30 10:38:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1639597-20190406113434223-2039183858]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/1639597-20190406113434223-2039183858.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:701;s:6:"height";i:321;s:4:"file";s:48:"2019/12/1639597-20190406113434223-2039183858.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:48:"1639597-20190406113434223-2039183858-300x137.png";s:5:"width";i:300;s:6:"height";i:137;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"1639597-20190406113434223-2039183858-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:47:"1639597-20190406113434223-2039183858-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20191230183740</title>
		<link>http://114.116.235.65/2019/12/31/359/%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91.html/qq%e5%9b%be%e7%89%8720191230183740</link>
		<pubDate>Mon, 30 Dec 2019 10:38:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/QQ图片20191230183740.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date><![CDATA[2019-12-30 18:38:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-30 10:38:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720191230183740]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>359</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/QQ图片20191230183740.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/QQ图片20191230183740.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:776;s:6:"height";i:471;s:4:"file";s:34:"2019/12/QQ图片20191230183740.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20191230183740-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20191230183740-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20191230183740-768x466.png";s:5:"width";i:768;s:6:"height";i:466;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:33:"QQ图片20191230183740-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1639597-20190406113434223-2039183858</title>
		<link>http://114.116.235.65/2019/12/31/359/%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91.html/1639597-20190406113434223-2039183858-2</link>
		<pubDate>Tue, 31 Dec 2019 05:01:36 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 13:01:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 05:01:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1639597-20190406113434223-2039183858-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>359</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/1639597-20190406113434223-2039183858-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:701;s:6:"height";i:321;s:4:"file";s:50:"2019/12/1639597-20190406113434223-2039183858-1.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:50:"1639597-20190406113434223-2039183858-1-300x137.png";s:5:"width";i:300;s:6:"height";i:137;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:50:"1639597-20190406113434223-2039183858-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"1639597-20190406113434223-2039183858-1-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>v2-d60beaed02a5adf399d960368d6e1288_hd</title>
		<link>http://114.116.235.65/2019/12/31/359/%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91.html/v2-d60beaed02a5adf399d960368d6e1288_hd</link>
		<pubDate>Tue, 31 Dec 2019 05:50:24 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 13:50:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 05:50:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2-d60beaed02a5adf399d960368d6e1288_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>359</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:229;s:4:"file";s:50:"2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:49:"v2-d60beaed02a5adf399d960368d6e1288_hd-300x95.jpg";s:5:"width";i:300;s:6:"height";i:95;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:50:"v2-d60beaed02a5adf399d960368d6e1288_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"v2-d60beaed02a5adf399d960368d6e1288_hd-140x98.jpg";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>v2-2891440582c8f79cb594f503f3721287_hd</title>
		<link>http://114.116.235.65/2019/12/31/359/%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91.html/v2-2891440582c8f79cb594f503f3721287_hd</link>
		<pubDate>Tue, 31 Dec 2019 05:51:07 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 13:51:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 05:51:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[v2-2891440582c8f79cb594f503f3721287_hd]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>359</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:452;s:4:"file";s:50:"2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:50:"v2-2891440582c8f79cb594f503f3721287_hd-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:50:"v2-2891440582c8f79cb594f503f3721287_hd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"v2-2891440582c8f79cb594f503f3721287_hd-140x98.jpg";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>20180717201939345 (1)</title>
		<link>http://114.116.235.65/2019/11/28/388/tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b.html/20180717201939345-1</link>
		<pubDate>Tue, 31 Dec 2019 08:17:02 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/20180717201939345-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 16:17:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 08:17:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20180717201939345-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/20180717201939345-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/20180717201939345-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:708;s:6:"height";i:443;s:4:"file";s:31:"2019/12/20180717201939345-1.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:31:"20180717201939345-1-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:31:"20180717201939345-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"20180717201939345-1-140x98.jpg";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1367382-20181107194907929-4971949</title>
		<link>http://114.116.235.65/2019/11/28/388/tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b.html/1367382-20181107194907929-4971949</link>
		<pubDate>Tue, 31 Dec 2019 08:21:41 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107194907929-4971949.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 16:21:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 08:21:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1367382-20181107194907929-4971949]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107194907929-4971949.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/1367382-20181107194907929-4971949.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:428;s:4:"file";s:45:"2019/12/1367382-20181107194907929-4971949.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:45:"1367382-20181107194907929-4971949-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:45:"1367382-20181107194907929-4971949-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:44:"1367382-20181107194907929-4971949-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1367382-20181107202912207-1921343718</title>
		<link>http://114.116.235.65/2019/11/28/388/tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b.html/1367382-20181107202912207-1921343718</link>
		<pubDate>Tue, 31 Dec 2019 08:27:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107202912207-1921343718.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 16:27:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 08:27:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1367382-20181107202912207-1921343718]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>388</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107202912207-1921343718.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/12/1367382-20181107202912207-1921343718.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:772;s:6:"height";i:524;s:4:"file";s:48:"2019/12/1367382-20181107202912207-1921343718.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:48:"1367382-20181107202912207-1921343718-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"1367382-20181107202912207-1921343718-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:48:"1367382-20181107202912207-1921343718-768x521.png";s:5:"width";i:768;s:6:"height";i:521;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:47:"1367382-20181107202912207-1921343718-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>bookmarks_2020_1_1</title>
		<link>http://114.116.235.65/2020/01/01/402/%e4%b9%a6%e7%ad%be%e9%9b%86%e5%90%881.html/bookmarks_2020_1_1</link>
		<pubDate>Wed, 01 Jan 2020 06:03:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/bookmarks_2020_1_1.html</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 14:03:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 06:03:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bookmarks_2020_1_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>402</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/bookmarks_2020_1_1.html]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/bookmarks_2020_1_1.html]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>bookmarks_2020_1_1</title>
		<link>http://114.116.235.65/bookmarks_2020_1_1-2</link>
		<pubDate>Wed, 01 Jan 2020 06:08:03 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/bookmarks_2020_1_1-1.html</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 14:08:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 06:08:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bookmarks_2020_1_1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/bookmarks_2020_1_1-1.html]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/bookmarks_2020_1_1-1.html]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>说明</title>
		<link>http://114.116.235.65/%e8%af%b4%e6%98%8e</link>
		<pubDate>Wed, 01 Jan 2020 07:39:58 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/说明.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 15:39:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 07:39:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%b4%e6%98%8e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/说明.txt]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/说明.txt]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1228216-20180728200542682-131026381</title>
		<link>http://114.116.235.65/2020/01/03/421/%e6%99%ba%e8%83%bd%e6%8c%87%e9%92%88.html/1228216-20180728200542682-131026381</link>
		<pubDate>Fri, 03 Jan 2020 06:59:15 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/1228216-20180728200542682-131026381.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date><![CDATA[2020-01-03 14:59:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-03 06:59:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1228216-20180728200542682-131026381]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>421</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/1228216-20180728200542682-131026381.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1228216-20180728200542682-131026381.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:911;s:6:"height";i:386;s:4:"file";s:47:"2020/01/1228216-20180728200542682-131026381.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:47:"1228216-20180728200542682-131026381-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:47:"1228216-20180728200542682-131026381-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:47:"1228216-20180728200542682-131026381-768x325.png";s:5:"width";i:768;s:6:"height";i:325;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:46:"1228216-20180728200542682-131026381-140x98.png";s:5:"width";i:140;s:6:"height";i:98;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>5e15f24e4c982c01202c4609</title>
		<link>http://114.116.235.65/?attachment_id=458</link>
		<pubDate>Wed, 08 Jan 2020 15:18:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 23:18:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 15:18:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5e15f24e4c982c01202c4609]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/5e15f24e4c982c01202c4609.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:36:"2020/01/5e15f24e4c982c01202c4609.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:36:"5e15f24e4c982c01202c4609-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"5e15f24e4c982c01202c4609-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"5e15f24e4c982c01202c4609-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>5e15f24e4c982c01202c4609</title>
		<link>http://114.116.235.65/?attachment_id=459</link>
		<pubDate>Wed, 08 Jan 2020 15:20:21 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 23:20:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 15:20:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5e15f24e4c982c01202c4609-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/5e15f24e4c982c01202c4609.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:190;s:6:"height";i:120;s:4:"file";s:36:"2020/01/5e15f24e4c982c01202c4609.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"5e15f24e4c982c01202c4609-150x120.gif";s:5:"width";i:150;s:6:"height";i:120;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>5e15f24e4c982c01202c4609</title>
		<link>http://114.116.235.65/?attachment_id=460</link>
		<pubDate>Wed, 08 Jan 2020 15:20:21 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 23:20:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 15:20:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5e15f24e4c982c01202c4609-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>447</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/5e15f24e4c982c01202c4609-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:190;s:6:"height";i:120;s:4:"file";s:38:"2020/01/5e15f24e4c982c01202c4609-1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"5e15f24e4c982c01202c4609-1-150x120.png";s:5:"width";i:150;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>5e15f24e4c982c01202c4609 (1)</title>
		<link>http://114.116.235.65/?attachment_id=461</link>
		<pubDate>Wed, 08 Jan 2020 15:22:11 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609-1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>461</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 23:22:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 15:22:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5e15f24e4c982c01202c4609-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>448</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/5e15f24e4c982c01202c4609-1-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/5e15f24e4c982c01202c4609-1-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:190;s:6:"height";i:42;s:4:"file";s:40:"2020/01/5e15f24e4c982c01202c4609-1-1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"5e15f24e4c982c01202c4609-1-1-150x42.png";s:5:"width";i:150;s:6:"height";i:42;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1625739a03779fa3</title>
		<link>http://114.116.235.65/2020/01/09/462/%e5%a0%86%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/1625739a03779fa3</link>
		<pubDate>Thu, 09 Jan 2020 14:27:12 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/1625739a03779fa3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>463</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 22:27:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 14:27:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1625739a03779fa3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>462</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/1625739a03779fa3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1625739a03779fa3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:312;s:6:"height";i:227;s:4:"file";s:28:"2020/01/1625739a03779fa3.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:28:"1625739a03779fa3-300x218.png";s:5:"width";i:300;s:6:"height";i:218;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"1625739a03779fa3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"1625739a03779fa3-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1625739a038d7d2b</title>
		<link>http://114.116.235.65/2020/01/09/462/%e5%a0%86%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/1625739a038d7d2b</link>
		<pubDate>Thu, 09 Jan 2020 14:27:36 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/1625739a038d7d2b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 22:27:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 14:27:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1625739a038d7d2b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>462</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/1625739a038d7d2b.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1625739a038d7d2b.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:316;s:6:"height";i:219;s:4:"file";s:28:"2020/01/1625739a038d7d2b.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:28:"1625739a038d7d2b-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"1625739a038d7d2b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"1625739a038d7d2b-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1625739a039716c0</title>
		<link>http://114.116.235.65/2020/01/09/462/%e5%a0%86%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/1625739a039716c0</link>
		<pubDate>Thu, 09 Jan 2020 14:27:51 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/1625739a039716c0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 22:27:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 14:27:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1625739a039716c0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>462</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/1625739a039716c0.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1625739a039716c0.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:191;s:6:"height";i:226;s:4:"file";s:28:"2020/01/1625739a039716c0.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"1625739a039716c0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"1625739a039716c0-191x180.png";s:5:"width";i:191;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>3974900-a076b3f60b618185</title>
		<link>http://114.116.235.65/2020/01/10/473/%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/3974900-a076b3f60b618185</link>
		<pubDate>Fri, 10 Jan 2020 13:00:12 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/3974900-a076b3f60b618185.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3974900-a076b3f60b618185]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>473</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/3974900-a076b3f60b618185.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/3974900-a076b3f60b618185.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:811;s:6:"height";i:505;s:4:"file";s:36:"2020/01/3974900-a076b3f60b618185.gif";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:36:"3974900-a076b3f60b618185-300x187.gif";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"3974900-a076b3f60b618185-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:36:"3974900-a076b3f60b618185-768x478.gif";s:5:"width";i:768;s:6:"height";i:478;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"3974900-a076b3f60b618185-240x180.gif";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2018033115584192</title>
		<link>http://114.116.235.65/2020/01/10/476/%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/attachment/2018033115584192</link>
		<pubDate>Fri, 10 Jan 2020 13:28:08 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/2018033115584192.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>477</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:28:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:28:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2018033115584192]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>476</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/2018033115584192.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/2018033115584192.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1050;s:6:"height";i:580;s:4:"file";s:28:"2020/01/2018033115584192.gif";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:28:"2018033115584192-300x166.gif";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:9:"image/gif";}s:5:"large";a:4:{s:4:"file";s:29:"2018033115584192-1024x566.gif";s:5:"width";i:1024;s:6:"height";i:566;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"2018033115584192-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:28:"2018033115584192-768x424.gif";s:5:"width";i:768;s:6:"height";i:424;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"2018033115584192-240x180.gif";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>20190219081232815</title>
		<link>http://114.116.235.65/2020/01/10/476/%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/attachment/20190219081232815</link>
		<pubDate>Fri, 10 Jan 2020 13:28:24 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/20190219081232815.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:28:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:28:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20190219081232815]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>476</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/20190219081232815.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/20190219081232815.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:891;s:6:"height";i:816;s:4:"file";s:29:"2020/01/20190219081232815.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:29:"20190219081232815-300x275.png";s:5:"width";i:300;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:29:"20190219081232815-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:29:"20190219081232815-768x703.png";s:5:"width";i:768;s:6:"height";i:703;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"20190219081232815-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Invoker</title>
		<link>http://114.116.235.65/2019/11/30/86/invoker.html</link>
		<pubDate>Sat, 30 Nov 2019 10:51:04 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/index.php/2019/11/30/invoker/</guid>
		<description></description>
		<content:encoded><![CDATA[#slider-cover > img{
	 width: 100%;
  height: 100%;}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 18:51:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 10:51:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[invoker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[custom_css]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>首页</title>
		<link>http://114.116.235.65/2019/12/29/272/%e9%a6%96%e9%a1%b5.html</link>
		<pubDate>Sun, 29 Dec 2019 06:49:04 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 14:49:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 06:49:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a6%96%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95%e5%af%bc%e8%88%aa"><![CDATA[菜单导航]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[272]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://114.116.235.65/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://114.116.235.65/2019/12/29/273/273.html</link>
		<pubDate>Sun, 29 Dec 2019 06:49:04 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=273</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 14:49:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 06:49:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[273]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95%e5%af%bc%e8%88%aa"><![CDATA[菜单导航]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Logo Src</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=447</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=447</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-logo_src]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Logo M Src</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=448</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=448</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-logo_m_src]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focus Src</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=449</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=449</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focus_src]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focusslide Src 1</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=450</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=450</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focusslide_src_1]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focusslide Src 2</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=451</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=451</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focusslide_src_2]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focusslide Src 3</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=452</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=452</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focusslide_src_3]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focusslide Src 4</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=453</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=453</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focusslide_src_4]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Focusslide Src 5</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=454</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=454</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-focusslide_src_5]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>11765489-853a6001b7a7e473</title>
		<link>http://114.116.235.65/2020/01/10/476/%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/11765489-853a6001b7a7e473</link>
		<pubDate>Fri, 10 Jan 2020 13:35:03 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/11765489-853a6001b7a7e473.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>479</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:35:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:35:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[11765489-853a6001b7a7e473]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>476</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/11765489-853a6001b7a7e473.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/11765489-853a6001b7a7e473.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1012;s:6:"height";i:574;s:4:"file";s:37:"2020/01/11765489-853a6001b7a7e473.gif";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:37:"11765489-853a6001b7a7e473-300x170.gif";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:37:"11765489-853a6001b7a7e473-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:37:"11765489-853a6001b7a7e473-768x436.gif";s:5:"width";i:768;s:6:"height";i:436;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"11765489-853a6001b7a7e473-240x180.gif";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>7789414-2737ec30a70ff74f</title>
		<link>http://114.116.235.65/2020/01/10/482/%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html/7789414-2737ec30a70ff74f</link>
		<pubDate>Fri, 10 Jan 2020 14:01:32 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/7789414-2737ec30a70ff74f.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 22:01:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 14:01:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[7789414-2737ec30a70ff74f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>482</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/7789414-2737ec30a70ff74f.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/7789414-2737ec30a70ff74f.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:811;s:6:"height";i:505;s:4:"file";s:36:"2020/01/7789414-2737ec30a70ff74f.gif";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:36:"7789414-2737ec30a70ff74f-300x187.gif";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/gif";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"7789414-2737ec30a70ff74f-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:12:"medium_large";a:4:{s:4:"file";s:36:"7789414-2737ec30a70ff74f-768x478.gif";s:5:"width";i:768;s:6:"height";i:478;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"7789414-2737ec30a70ff74f-240x180.gif";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1281268-20180509063436446-1450605939</title>
		<link>http://114.116.235.65/2020/01/10/485/%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e5%8e%9f%e7%90%86.html/1281268-20180509063436446-1450605939</link>
		<pubDate>Fri, 10 Jan 2020 14:29:27 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/1281268-20180509063436446-1450605939.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 22:29:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 14:29:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1281268-20180509063436446-1450605939]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>485</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/1281268-20180509063436446-1450605939.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/1281268-20180509063436446-1450605939.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:432;s:6:"height";i:494;s:4:"file";s:48:"2020/01/1281268-20180509063436446-1450605939.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:48:"1281268-20180509063436446-1450605939-262x300.png";s:5:"width";i:262;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:48:"1281268-20180509063436446-1450605939-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:48:"1281268-20180509063436446-1450605939-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>703358-20160712170216170-126802192</title>
		<link>http://114.116.235.65/2020/01/12/490/%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%ad%90%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98.html/703358-20160712170216170-126802192</link>
		<pubDate>Sun, 12 Jan 2020 13:19:12 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/703358-20160712170216170-126802192.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date><![CDATA[2020-01-12 21:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-12 13:19:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[703358-20160712170216170-126802192]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>490</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/703358-20160712170216170-126802192.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/703358-20160712170216170-126802192.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:374;s:6:"height";i:84;s:4:"file";s:46:"2020/01/703358-20160712170216170-126802192.jpg";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:45:"703358-20160712170216170-126802192-300x67.jpg";s:5:"width";i:300;s:6:"height";i:67;s:9:"mime-type";s:10:"image/jpeg";}s:9:"thumbnail";a:4:{s:4:"file";s:45:"703358-20160712170216170-126802192-150x84.jpg";s:5:"width";i:150;s:6:"height";i:84;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"703358-20160712170216170-126802192-240x84.jpg";s:5:"width";i:240;s:6:"height";i:84;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>QQ图片20200113134559</title>
		<link>http://114.116.235.65/2020/01/13/494/%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0.html/qq%e5%9b%be%e7%89%8720200113134559</link>
		<pubDate>Mon, 13 Jan 2020 05:48:54 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/QQ图片20200113134559.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>496</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 13:48:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 05:48:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[qq%e5%9b%be%e7%89%8720200113134559]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/QQ图片20200113134559.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/QQ图片20200113134559.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:902;s:6:"height";i:357;s:4:"file";s:34:"2020/01/QQ图片20200113134559.png";s:5:"sizes";a:4:{s:6:"medium";a:4:{s:4:"file";s:34:"QQ图片20200113134559-300x119.png";s:5:"width";i:300;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:34:"QQ图片20200113134559-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"QQ图片20200113134559-768x304.png";s:5:"width";i:768;s:6:"height";i:304;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"QQ图片20200113134559-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>批注 2020-01-13 144301</title>
		<link>http://114.116.235.65/2020/01/13/494/%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0.html/%e6%89%b9%e6%b3%a8-2020-01-13-144301</link>
		<pubDate>Mon, 13 Jan 2020 06:46:20 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-144301.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 14:46:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 06:46:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%b9%e6%b3%a8-2020-01-13-144301]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-144301.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/批注-2020-01-13-144301.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:705;s:6:"height";i:396;s:4:"file";s:36:"2020/01/批注-2020-01-13-144301.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:36:"批注-2020-01-13-144301-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-144301-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-144301-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>批注 2020-01-13 151325</title>
		<link>http://114.116.235.65/2020/01/13/494/%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0.html/%e6%89%b9%e6%b3%a8-2020-01-13-151325</link>
		<pubDate>Mon, 13 Jan 2020 07:13:45 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-151325.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>498</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 15:13:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 07:13:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%b9%e6%b3%a8-2020-01-13-151325]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-151325.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/批注-2020-01-13-151325.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:200;s:4:"file";s:36:"2020/01/批注-2020-01-13-151325.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:36:"批注-2020-01-13-151325-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-151325-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-151325-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>批注 2020-01-13 152310</title>
		<link>http://114.116.235.65/2020/01/13/494/%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0.html/%e6%89%b9%e6%b3%a8-2020-01-13-152310</link>
		<pubDate>Mon, 13 Jan 2020 07:23:33 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-152310.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 15:23:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 07:23:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%b9%e6%b3%a8-2020-01-13-152310]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>494</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-152310.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/批注-2020-01-13-152310.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:681;s:6:"height";i:293;s:4:"file";s:36:"2020/01/批注-2020-01-13-152310.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:36:"批注-2020-01-13-152310-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-152310-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"批注-2020-01-13-152310-240x180.png";s:5:"width";i:240;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2019052717355946</title>
		<link>http://114.116.235.65/2019/12/14/506/linux%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4.html/attachment/2019052717355946</link>
		<pubDate>Wed, 29 Jan 2020 11:40:25 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/wp-content/uploads/2020/01/2019052717355946.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date><![CDATA[2020-01-29 19:40:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-29 11:40:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2019052717355946]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>506</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://114.116.235.65/wp-content/uploads/2020/01/2019052717355946.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/2019052717355946.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:636;s:6:"height";i:143;s:4:"file";s:28:"2020/01/2019052717355946.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:27:"2019052717355946-300x67.png";s:5:"width";i:300;s:6:"height";i:67;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:28:"2019052717355946-150x143.png";s:5:"width";i:150;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"2019052717355946-240x143.png";s:5:"width";i:240;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>隐私政策</title>
		<link>http://114.116.235.65/?page_id=3</link>
		<pubDate>Fri, 29 Nov 2019 12:50:23 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p>我们的站点地址是：http://114.116.235.65。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们收集何种及为何收集个人数据</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>评论</h3><!-- /wp:heading --><!-- wp:paragraph --><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>媒体</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>联系表单</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录会保留两周。如果您注销，登录cookies将被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个小甜饼会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>其他站点的嵌入内容</h3><!-- /wp:heading --><!-- wp:paragraph --><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>统计</h3><!-- /wp:heading --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们将您的信息发送到哪</h2><!-- /wp:heading --><!-- wp:paragraph --><p>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您的联系信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>其他信息</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们如何保护您的数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们有何种数据泄露处理流程</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们从哪些第三方接收数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们通过用户数据进行何种自动决策及/或归纳</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>行业监管披露要求</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2019-11-29 20:50:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 12:50:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>关于</title>
		<link>http://114.116.235.65/guanyu</link>
		<pubDate>Sat, 30 Nov 2019 08:56:49 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?page_id=55</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>持而盈之，不如其已。揣而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗其咎。功成身退，天之道。</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 16:56:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-30 08:56:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[guanyu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[144]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>http://114.116.235.65/?page_id=232</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?page_id=232</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2019-12-16 23:21:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Epoll分析与select、poll比较</title>
		<link>http://114.116.235.65/2019/10/15/274/epoll%e5%88%86%e6%9e%90%e4%b8%8eselect%e3%80%81poll%e6%af%94%e8%be%83.html</link>
		<pubDate>Tue, 15 Oct 2019 05:04:30 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>什么是epoll？</strong>
<ul>这是我们在处理及思考问题时首先会碰到的问题，如何正确快速建立起相应的知识概念是我个人首要任务。</ul>

<blockquote>epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态减少epoll_wait/epoll_pwait的调用，提高应用程序效率。--百度百科。</blockquote>
<!--more-->

<strong>select模型相关问题</strong>

<ul>1、最大并发数限制：因为一个进程所打开的fd（文件描述符）是有限制的，由FD_SETSIZE设置，默认值是1024/2048，因此select模型的最大并发数就被相应限制了。
</ul>
<ul>2、效率问题：select每次调用都会线性扫描全部的fd集合，这样效率就会呈现线性下降，把FD_SETSIZE改大可能造成这些fd都超时了。</ul>
&nbsp;
<ul>3、内核/用户空间内存拷贝问题：如何让内核把fd消息通知给用户空间呢？在这个问题上select采取了内存拷贝方法。</ul>
<strong>poll模型</strong>
<ul>解决了select的并发数量问题，但对于select的效率问题仍然没有解决。</ul>
<strong>epoll模型</strong>

<ul>epoll模型</ul>


<ul>对比其他模型的问题，epoll的改进如下：</ul>


<blockquote>
1.支持一个进程打开大数目的socket描述符(FD)
   select 最不能忍受的是一个进程所打开的FD是有一定限制的，由FD_SETSIZE设置，默认值是2048。对于那些需要支持的上万连接数目的IM服务器来说显然太少了。这时候你一是可以选择修改这个宏然后重新编译内核，不过资料也同时指出这样会带来网络效率的下降，二是可以选择多进程的解决方案(传统的 Apache方案)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。不过 epoll则没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。

2.IO效率不随FD数目增加而线性下降
    传统的select/poll另一个致命弱点就是当你拥有一个很大的socket集合，不过由于网络延时，任一时间只有部分的socket是"活跃"的，但是select/poll每次调用都会线性扫描全部的集合，导致效率呈现线性下降。但是epoll不存在这个问题，它只会对"活跃"的socket进行操作---这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的。那么，只有"活跃"的socket才会主动的去调用 callback函数，其他idle状态socket则不会，在这点上，epoll实现了一个"伪"AIO，因为这时候推动力在os内核。在一些 benchmark中，如果所有的socket基本上都是活跃的---比如一个高速LAN环境，epoll并不比select/poll有什么效率，相反，如果过多使用epoll_ctl,效率相比还有稍微的下降。但是一旦使用idle connections模拟WAN环境,epoll的效率就远在select/poll之上了。

3.使用mmap加速内核与用户空间的消息传递
    这点实际上涉及到epoll的具体实现了。无论是select,poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存拷贝就很重要，在这点上，epoll是通过内核于用户空间mmap同一块内存实现的。而如果你想我一样从2.5内核就关注epoll的话，一定不会忘记手工 mmap这一步的。

4.内核微调
    这一点其实不算epoll的优点了，而是整个linux平台的优点。也许你可以怀疑linux平台，但是你无法回避linux平台赋予你微调内核的能力。比如，内核TCP/IP协议栈使用内存池管理sk_buff结构，那么可以在运行时期动态调整这个内存pool(skb_head_pool)的大小--- 通过echo XXXX&gt;/proc/sys/net/core/hot_list_length完成。再比如listen函数的第2个参数(TCP完成3次握手的数据包队列长度)，也可以根据你平台内存大小动态调整。更甚至在一个数据包面数目巨大但同时每个数据包本身大小却很小的特殊系统上尝试最新的NAPI网卡驱动架构。
</blockquote>


<strong>Epoll API</strong>


epoll只有epoll_create,epoll_ctl,epoll_wait 3个系统调用。
[cc lang="c++"]
   #include  <sys/epoll.h>
  
 int  epoll_create(int  size);
 int  epoll_ctl(int epfd, int op, int fd, structepoll_event *event);
  
 int  epoll_wait(int epfd, struct epoll_event* events, int maxevents. int timeout);
  
 [/cc]
① int epoll_create(int size);
创建一个epoll的句柄。自从linux2.6.8之后，size参数是被忽略的。需要注意的是，当创建好epoll句柄后，它就是会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。

②int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
epoll的事件注册函数，它不同于select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。
第一个参数是epoll_create()的返回值。
第二个参数表示动作，用三个宏来表示：
[cc lang="c++"]
EPOLL_CTL_ADD：注册新的fd到epfd中；
EPOLL_CTL_MOD：修改已经注册的fd的监听事件；
EPOLL_CTL_DEL：从epfd中删除一个fd；
 [/cc]
第三个参数是需要监听的fd。
第四个参数是告诉内核需要监听什么事，struct epoll_event结构如下：
 //保存触发事件的某个文件描述符相关的数据（与具体使用方式有关）
[cc lang="c++"]  
typedef union epoll_data {
    void *ptr;
    int fd;
     __uint32_t u32;
} epoll_data_t;
  //感兴趣的事件和被触发的事件
 struct epoll_event {
     __uint32_t events; /* Epoll events */
     epoll_data_t data; /* User data variable */
 };
[/cc]

结构体epoll_event 被用于注册所感兴趣的事件和回传所发生待处理的事件，而epoll_data 联合体用来保存触发事件的某个文件描述符相关的数据。例如一个client连接到服务器，服务器通过调用accept函数可以得到于这个client对应的socket文件描述符，可以把这文件描述符赋给epoll_data的fd字段，以便后面的读写操作在这个文件描述符上进行。epoll_event 结构体的events字段是表示感兴趣的事件和被触发的事件，可能的取值为：
[cc lang="c++"]EPOLLIN：表示对应的文件描述符可以读；
EPOLLOUT：表示对应的文件描述符可以写；
EPOLLPRI：表示对应的文件描述符有紧急的数据可读；
EPOLLERR：表示对应的文件描述符发生错误；
EPOLLHUP：表示对应的文件描述符被挂断；
EPOLLET：表示对应的文件描述符有事件发生；
[/cc]

<strong>Epoll  工作模式</strong>



<blockquote>①LT模式：Level Triggered水平触发
这个是缺省的工作模式。同时支持block socket和non-block socket。内核会告诉程序员一个文件描述符是否就绪了。如果程序员不作任何操作，内核仍会通知。


②ET模式：Edge Triggered 边缘触发
是一种高速模式。仅当状态发生变化的时候才获得通知。这种模式假定程序员在收到一次通知后能够完整地处理事件，于是内核不再通知这一事件。注意：缓冲区中还有未处理的数据不算状态变化，所以ET模式下程序员只读取了一部分数据就再也得不到通知了，正确的用法是程序员自己确认读完了所有的字节（一直调用read/write直到出错EAGAIN为止）。
</blockquote>


<li>

Epoll模型主要负责对大量并发用户的请求进行及时处理，完成服务器与客户端的数据交互。其具体的实现步骤如下：
<blockquote>
(a) 使用epoll_create()函数创建文件描述，设定可管理的最大socket描述符数目。
(b) 创建与epoll关联的接收线程，应用程序可以创建多个接收线程来处理epoll上的读通知事件，线程的数量依赖于程序的具体需要。
(c) 创建一个侦听socket的描述符ListenSock，并将该描述符设定为非阻塞模式，调用Listen()函数在该套接字上侦听有无新的连接请求，在epoll_event结构中设置要处理的事件类型EPOLLIN，工作方式为 epoll_ET，以提高工作效率，同时使用epoll_ctl()来注册事件，最后启动网络监视线程。
(d) 网络监视线程启动循环，epoll_wait()等待epoll事件发生。
(e) 如果epoll事件表明有新的连接请求，则调用accept()函数，将用户socket描述符添加到epoll_data联合体，同时设定该描述符为非阻塞，并在epoll_event结构中设置要处理的事件类型为读和写，工作方式为epoll_ET。
(f) 如果epoll事件表明socket描述符上有数据可读，则将该socket描述符加入可读队列，通知接收线程读入数据，并将接收到的数据放入到接收数据的链表中，经逻辑处理后，将反馈的数据包放入到发送数据链表中，等待由发送线程发送。
</blockquote>
</li>

<strong>总结</strong>
	<li>一颗红黑树，一张准备就绪句柄链表，少量的内核cache，就帮我们解决了大并发下的socket处理问题。</li>


	<li>执行epoll_create()时，创建了红黑树和就绪链表；</li>


	<li>执行epoll_ctl()时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪链表中插入数据；</li>


	<li>执行epoll_wait()时立刻返回准备就绪链表里的数据即可。</li>

<strong>文章参考</strong>
<a href="https://blog.csdn.net/weixin_34279061/article/details/89867644" rel="noopener noreferrer" target="_blank">epoll事件处理机制详解</a>
<a href="https://blog.csdn.net/chen19870707/article/details/42525887" rel="noopener noreferrer" target="_blank">Epoll详解及源码分析</a>
<a href="https://blog.csdn.net/zhaobryant/article/details/80557262" rel="noopener noreferrer" target="_blank">Linux epoll模型详解及源码分析</a>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2019-10-15 13:04:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-15 05:04:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[epoll%e5%88%86%e6%9e%90%e4%b8%8eselect%e3%80%81poll%e6%af%94%e8%be%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="yuanma"><![CDATA[源码刨析]]></category>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b"><![CDATA[网络编程]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_b7441ffd15244b19525d3257e7053e01]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-12-30]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Epoll源码剖析 - yconion的个人博客]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://114.116.235.65/2019/10/25/314/epoll%e6%ba%90%e7%a0%81%e5%89%96%e6%9e%90.html</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.116.235.65]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-30 15:59:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-30 07:59:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] ①从上一篇文章的调用方式就可以看出epoll比select/poll的一个优势：select/poll每次调用都要传递所要监控的所有fd给select/poll系统调用（这意味着每次调用都要将fd列表从用户态拷贝到内核态，当fd数目很多时，这会造成低效）。而每次调用epoll_wait时（作用相当于调用select/poll），不需要再传递fd列表给内核，因为已经在epoll_ctl中将需要监控的fd告诉了内核（epoll_ctl不需要每次都拷贝所有的fd，只需要进行增量式操作）。所以，在调用epoll_create之后，内核已经在内核态开始准备数据结构存放要监控的fd了。每次epoll_ctl只是对这个数据结构进行简单的维护。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1577692770]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1577692770.702476;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:0:"";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1577695140.5105469;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"yconion";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Epoll源码剖析</title>
		<link>http://114.116.235.65/2019/10/25/314/epoll%e6%ba%90%e7%a0%81%e5%89%96%e6%9e%90.html</link>
		<pubDate>Fri, 25 Oct 2019 06:55:26 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>epoll实现</strong>
 
epoll 的实现比poll/select 复杂一些，这是因为：

<blockquote>
1.  epoll_wait, epoll_ctl 的调用完全独立开来,内核需要锁机制对这些操作进行保护，并且需要持久的维护添加到epoll的文件
2.  epoll本身也是文件，也可以被poll/select/epoll监视，这可能导致epoll之间循环唤醒的问题
3.  单个文件的状态改变可能唤醒过多监听在其上的epoll，产生唤醒风暴
</blockquote>
epoll各个功能的实现要非常小心面对这些问题，使得复杂度大大增加。

<strong>Epoll原理分析</strong>
<div class="alert alert-success" role="alert">
①从<a href="http://114.116.235.65/2019/10/15/274/epoll%e5%88%86%e6%9e%90%e4%b8%8eselect%e3%80%81poll%e6%af%94%e8%be%83.html" rel="noopener noreferrer" target="_blank">上一篇文章</a>的调用方式就可以看出epoll比select/poll的一个优势：select/poll每次调用都要传递所要监控的所有fd给select/poll系统调用（这意味着每次调用都要将fd列表从用户态拷贝到内核态，当fd数目很多时，这会造成低效）。而每次调用epoll_wait时（作用相当于调用select/poll），不需要再传递fd列表给内核，因为已经在epoll_ctl中将需要监控的fd告诉了内核（epoll_ctl不需要每次都拷贝所有的fd，只需要进行增量式操作）。所以，在调用epoll_create之后，内核已经在内核态开始准备数据结构存放要监控的fd了。每次epoll_ctl只是对这个数据结构进行简单的维护。

② 此外，内核使用了slab机制，为epoll提供了快速的数据结构：

在内核里，一切皆文件。所以，epoll向内核注册了一个文件系统，用于存储上述的被监控的fd。当你调用epoll_create时，就会在这个虚拟的epoll文件系统里创建一个file结点。当然这个file不是普通文件，它只服务于epoll。epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的fd，这些fd会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。

③ epoll的第三个优势在于：当我们调用epoll_ctl往里塞入百万个fd时，epoll_wait仍然可以飞快的返回，并有效的将发生事件的fd给我们用户。这是由于我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的fd外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。而且，通常情况下即使我们要监控百万计的fd，大多一次也只返回很少量的准备就绪fd而已，所以，epoll_wait仅需要从内核态copy少量的fd到用户态而已。那么，这个准备就绪list链表是怎么维护的呢？当我们执行epoll_ctl时，除了把fd放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个fd的中断到了，就把它放到准备就绪list链表里。所以，当一个fd（例如socket）上有数据到了，内核在把设备（例如网卡）上的数据copy到内核中后就来把fd（socket）插入到准备就绪list链表里了。
</div>

[caption width="662" align="aligncenter"]<img src="https://img-blog.csdnimg.cn/20181108145440376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhYWlrdWFpY2h1YW4=,size_16,color_FFFFFF,t_70" width="662" height="558" class="size-thumbnail" /> epoll原理[/caption]
<strong>epoll的核心数据结构</strong>
[cc lang="c++"]
// epoll的核心实现对应于一个epoll描述符  
struct eventpoll {  
    spinlock_t lock;  
    struct mutex mtx;  
    wait_queue_head_t wq; // sys_epoll_wait() 等待在这里  
    // f_op->poll()  使用的, 被其他事件通知机制利用的wait_address  
    wait_queue_head_t poll_wait;  
    /* 已就绪的需要检查的epitem 列表 */  
    struct list_head rdllist;  
    /* 保存所有加入到当前epoll的文件对应的epitem*/  
    struct rb_root rbr;  
    // 当正在向用户空间复制数据时, 产生的可用文件  
    struct epitem *ovflist;  
    /* The user that created the eventpoll descriptor */  
    struct user_struct *user;  
    struct file *file;  
    /*优化循环检查，避免循环检查中重复的遍历 */  
    int visited;  
    struct list_head visited_list_link;  
}  
  
// 对应于一个加入到epoll的文件  
struct epitem {  
    // 挂载到eventpoll 的红黑树节点  
    struct rb_node rbn;  
    // 挂载到eventpoll.rdllist 的节点  
    struct list_head rdllink;  
    // 连接到ovflist 的指针  
    struct epitem *next;  
    /* 文件描述符信息fd + file, 红黑树的key */  
    struct epoll_filefd ffd;  
    /* Number of active wait queue attached to poll operations */  
    int nwait;  
    // 当前文件的等待队列(eppoll_entry)列表  
    // 同一个文件上可能会监视多种事件,  
    // 这些事件可能属于不同的wait_queue中  
    // (取决于对应文件类型的实现),  
    // 所以需要使用链表  
    struct list_head pwqlist;  
    // 当前epitem 的所有者  
    struct eventpoll *ep;  
    /* List header used to link this item to the &quot;struct file&quot; items list */  
    struct list_head fllink;  
    /* epoll_ctl 传入的用户数据 */  
    struct epoll_event event;  
};  
  
struct epoll_filefd {  
    struct file *file;  
    int fd;  
};  
  
// 与一个文件上的一个wait_queue_head 相关联，因为同一文件可能有多个等待的事件，这些事件可能使用不同的等待队列  
struct eppoll_entry {  
    // List struct epitem.pwqlist  
    struct list_head llink;  
    // 所有者  
    struct epitem *base;  
    // 添加到wait_queue 中的节点  
    wait_queue_t wait;  
    // 文件wait_queue 头  
    wait_queue_head_t *whead;  
};  
  
// 用户使用的epoll_event  
struct epoll_event {  
    __u32 events;  
    __u64 data;  
} EPOLL_PACKED;  
[/cc]


<div class="alert alert-info" role="alert">
epoll的核心实现对应于一个epoll描述符,在一个fd加入epoll中时epitem结构即表现了具体的逻辑实现所涉及的操作对象。
</div>
<strong>文件系统初始化和epoll_create</strong>
[cc lang="c"]
// epoll 文件系统的相关实现  
// epoll 文件系统初始化, 在系统启动时会调用  
  
static int __init eventpoll_init(void)  
{  
    struct sysinfo si;  
  
    si_meminfo(&si);  
    // 限制可添加到epoll的最多的描述符数量  
  
    max_user_watches = (((si.totalram - si.totalhigh) / 25) << PAGE_SHIFT) /  
                       EP_ITEM_COST;  
    BUG_ON(max_user_watches < 0);  
  
    // 初始化递归检查队列  
   ep_nested_calls_init(&poll_loop_ncalls);  
    ep_nested_calls_init(&poll_safewake_ncalls);  
    ep_nested_calls_init(&poll_readywalk_ncalls);  
    // epoll 使用的slab分配器分别用来分配epitem和eppoll_entry  
    epi_cache = kmem_cache_create("eventpoll_epi", sizeof(struct epitem),  
                                  0, SLAB_HWCACHE_ALIGN | SLAB_PANIC, NULL);  
    pwq_cache = kmem_cache_create("eventpoll_pwq",  
                                  sizeof(struct eppoll_entry), 0, SLAB_PANIC, NULL);  
  
    return 0;  
}  
  
  
SYSCALL_DEFINE1(epoll_create, int, size)  
{  
    if (size <= 0) {  
        return -EINVAL;  
    }  
  
    return sys_epoll_create1(0);  
}  
  
SYSCALL_DEFINE1(epoll_create1, int, flags)  
{  
    int error, fd;  
    struct eventpoll *ep = NULL;  
    struct file *file;  
  
    /* Check the EPOLL_* constant for consistency.  */  
    BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);  
  
    if (flags & ~EPOLL_CLOEXEC) {  
        return -EINVAL;  
    }  
    /* 
     * Create the internal data structure ("struct eventpoll"). 
     */  
    error = ep_alloc(&ep);  
    if (error < 0) {  
        return error;  
    }  
    /* 
     * Creates all the items needed to setup an eventpoll file. That is, 
     * a file structure and a free file descriptor. 
     */  
    fd = get_unused_fd_flags(O_RDWR | (flags & O_CLOEXEC));  
    if (fd < 0) {  
         error = fd;  
         goto out_free_ep;  
      }  
      // 设置epfd的相关操作，由于epoll也是文件也提供了poll操作  
    file = anon_inode_getfile("[eventpoll]", &eventpoll_fops, ep,  
                              O_RDWR | (flags & O_CLOEXEC));  
    if (IS_ERR(file)) {  
        error = PTR_ERR(file);  
        goto out_free_fd;  
    }  
    fd_install(fd, file);  
    ep->file = file;  
    return fd;  
  
out_free_fd:  
    put_unused_fd(fd);  
out_free_ep:  
    ep_free(ep);  
    return error;  
}  
[/cc]
<div class="alert alert-info" role="alert"></div>
<strong>
epoll中的递归死循环和深度检查
</strong>
[cc lang="c"]
struct nested_call_node {  
    struct list_head llink;  
    void *cookie;   // 函数运行标识, 任务标志  
    void *ctx;      // 运行环境标识  
};  
struct nested_calls {  
    struct list_head tasks_call_list;  
    spinlock_t lock;  
};  
  
// 全局的不同调用使用的链表  
// 死循环检查和唤醒风暴检查链表  
static nested_call_node poll_loop_ncalls;  
// 唤醒时使用的检查链表  
static nested_call_node poll_safewake_ncalls;  
// 扫描readylist 时使用的链表  
static nested_call_node poll_readywalk_ncalls;  
  
  
// 限制epoll 中直接或间接递归调用的深度并防止死循环  
// ctx: 任务运行上下文(进程, CPU 等)  
// cookie: 每个任务的标识  
// priv: 任务运行需要的私有数据  
// 如果用面向对象语言实现应该就会是一个wapper类  
static int ep_call_nested(struct nested_calls *ncalls, int max_nests,  
                          int (*nproc)(void *, void *, int), void *priv,  
                          void *cookie, void *ctx)  
{  
    int error, call_nests = 0;  
    unsigned long flags;  
    struct list_head *lsthead = &ncalls->tasks_call_list;  
    struct nested_call_node *tncur;  
    struct nested_call_node tnode;  
    spin_lock_irqsave(&ncalls->lock, flags);  
    // 检查原有的嵌套调用链表ncalls, 查看是否有深度超过限制的情况  
    list_for_each_entry(tncur, lsthead, llink) {  
        // 同一上下文中(ctx)有相同的任务(cookie)说明产生了死循环  
        // 同一上下文的递归深度call_nests 超过限制  
        if (tncur->ctx == ctx &&  
                (tncur->cookie == cookie || ++call_nests > max_nests)) {  
            error = -1;  
        }  
        goto out_unlock;  
    }  
    /* 将当前的任务请求添加到调用列表*/  
    tnode.ctx = ctx;  
    tnode.cookie = cookie;  
    list_add(&tnode.llink, lsthead);  
    spin_unlock_irqrestore(&ncalls->lock, flags);  
    /* nproc 可能会导致递归调用(直接或间接)ep_call_nested 
         * 如果发生递归调用, 那么在此函数返回之前, 
         * ncalls 又会被加入额外的节点, 
         * 这样通过前面的检测就可以知道递归调用的深度 
      */  
    error = (*nproc)(priv, cookie, call_nests);  
    /* 从链表中删除当前任务*/  
    spin_lock_irqsave(&ncalls->lock, flags);  
    list_del(&tnode.llink);  
out_unlock:  
    spin_unlock_irqrestore(&ncalls->lock, flags);  
    return error;  
}  
[/cc]
<div class="alert alert-success" role="alert">
递归深度检测(ep_call_nested)
epoll本身也是文件，也可以被poll/select/epoll监视，如果epoll之间互相监视就有可能导致死循环。epoll的实现中，所有可能产生递归调用的函数都由函函数ep_call_nested进行包裹，递归调用过程中出现死循环或递归过深就会打破死循环和递归调用直接返回。该函数的实现依赖于一个外部的全局链表nested_call_node(不同的函数调用使用不同的节点)，每次调用可能发生递归的函数(nproc)就向链表中添加一个包含当前函数调用上下文ctx(进程，CPU，或epoll文件)和处理的对象标识cookie的节点，通过检测是否有相同的节点就可以知道是否发生了死循环，检查链表中同一上下文包含的节点个数就可以知道递归的深度。
</div>
[cc lang="c"]
static LIST_HEAD(visited_list);  
// 检查 file (epoll)和ep 之间是否有循环  
static int ep_loop_check(struct eventpoll *ep, struct file *file)  
{  
    int ret;  
    struct eventpoll *ep_cur, *ep_next;  
  
    ret = ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS,  
                         ep_loop_check_proc, file, ep, current);  
    /* 清除链表和标志 */  
    list_for_each_entry_safe(ep_cur, ep_next, &visited_list,  
                             visited_list_link) {  
        ep_cur->visited = 0;  
        list_del(&ep_cur->visited_list_link);  
    }  
    return ret;  
}  
  
static int ep_loop_check_proc(void *priv, void *cookie, int call_nests)  
{  
    int error = 0;  
    struct file *file = priv;  
    struct eventpoll *ep = file->private_data;  
    struct eventpoll *ep_tovisit;  
    struct rb_node *rbp;  
    struct epitem *epi;  
  
    mutex_lock_nested(&ep->mtx, call_nests + 1);  
    // 标记当前为已遍历  
    ep->visited = 1;  
    list_add(&ep->visited_list_link, &visited_list);  
    // 遍历所有ep 监视的文件  
    for (rbp = rb_first(&ep->rbr); rbp; rbp = rb_next(rbp)) {  
        epi = rb_entry(rbp, struct epitem, rbn);  
        if (unlikely(is_file_epoll(epi->ffd.file))) {  
            ep_tovisit = epi->ffd.file->private_data;  
            // 跳过先前已遍历的, 避免循环检查  
            if (ep_tovisit->visited) {  
                continue;  
            }  
            // 所有ep监视的未遍历的epoll  
            error = ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS,  
                                   ep_loop_check_proc, epi->ffd.file,  
                                   ep_tovisit, current);  
            if (error != 0) {  
                break;  
            }  
        } else {  
            // 文件不在tfile_check_list 中, 添加  
            // 最外层的epoll 需要检查子epoll监视的文件  
            if (list_empty(&epi->ffd.file->f_tfile_llink))  
                list_add(&epi->ffd.file->f_tfile_llink,  
                         &tfile_check_list);  
        }  
    }  
    mutex_unlock(&ep->mtx);  
  
    return error;  
}  
[/cc]
<div class="alert alert-success" role="alert">
循环检测(ep_loop_check)
循环检查(ep_loop_check)，该函数递归调用ep_loop_check_proc利用ep_call_nested来实现epoll之间相互监视的死循环。因为ep_call_nested中已经对死循环和过深的递归做了检查，实际的ep_loop_check_proc的实现只是递归调用自己。其中的visited_list和visited标记完全是为了优化处理速度，如果没有visited_list和visited标记函数也是能够工作的。该函数中得上下文就是当前的进程，cookie就是正在遍历的epoll结构。
</div>
[cc lang="c"]
#define PATH_ARR_SIZE 5  
// 在EPOLL_CTL_ADD 时, 检查是否有可能产生唤醒风暴  
// epoll 允许的单个文件的唤醒深度小于5, 例如  
// 一个文件最多允许唤醒1000个深度为1的epoll描述符,  
//允许所有被单个文件直接唤醒的epoll描述符再次唤醒的epoll描述符总数是500  
//  
  
// 深度限制  
static const int path_limits[PATH_ARR_SIZE] = { 1000, 500, 100, 50, 10 };  
// 计算出来的深度  
static int path_count[PATH_ARR_SIZE];  
  
static int path_count_inc(int nests)  
{  
    /* Allow an arbitrary number of depth 1 paths */  
    if (nests == 0) {  
        return 0;  
    }  
  
    if (++path_count[nests] > path_limits[nests]) {  
        return -1;  
    }  
    return 0;  
}  
  
static void path_count_init(void)  
{  
    int i;  
  
    for (i = 0; i < PATH_ARR_SIZE; i++) {  
        path_count[i] = 0;  
    }  
}  
  
// 唤醒风暴检查函数  
static int reverse_path_check(void)  
{  
    int error = 0;  
    struct file *current_file;  
  
    /* let's call this for all tfiles */  
    // 遍历全局tfile_check_list 中的文件, 第一级  
    list_for_each_entry(current_file, &tfile_check_list, f_tfile_llink) {  
        // 初始化  
        path_count_init();  
        // 限制递归的深度, 并检查每个深度上唤醒的epoll 数量  
        error = ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS,  
                               reverse_path_check_proc, current_file,  
                               current_file, current);  
        if (error) {  
            break;  
        }  
    }  
    return error;  
}  
static int reverse_path_check_proc(void *priv, void *cookie, int call_nests)  
{  
    int error = 0;  
    struct file *file = priv;  
    struct file *child_file;  
    struct epitem *epi;  
  
    list_for_each_entry(epi, &file->f_ep_links, fllink) {  
        // 遍历监视file 的epoll  
        child_file = epi->ep->file;  
        if (is_file_epoll(child_file)) {  
            if (list_empty(&child_file->f_ep_links)) {  
                // 没有其他的epoll监视当前的这个epoll,  
                // 已经是叶子了  
                if (path_count_inc(call_nests)) {  
                    error = -1;  
                    break;  
                }  
            } else {  
                // 遍历监视这个epoll 文件的epoll,  
                // 递归调用  
                error = ep_call_nested(&poll_loop_ncalls,  
                                       EP_MAX_NESTS,  
                                       reverse_path_check_proc,  
                                       child_file, child_file,  
                                       current);  
            }  
            if (error != 0) {  
                break;  
            }  
        } else {  
            // 不是epoll , 不可能吧?  
            printk(KERN_ERR "reverse_path_check_proc: "  
                   "file is not an ep!\n");  
        }  
    }  
    return error;  
}  
[/cc]
<div class="alert alert-success" role="alert">
 唤醒风暴检测（reverse_path_check）
 当文件状态发生改变时，会唤醒监听在其上的epoll文件，而这个epoll文件还可能唤醒其他的epoll文件，这种连续的唤醒就形成了一个唤醒路径，所有的唤醒路径就形成了一个有向图。如果文件对应的epoll唤醒有向图的节点过多，那么文件状态的改变就会唤醒所有的这些epoll(可能会唤醒很多进程，这样的开销是很大的)，而实际上一个文件经过少数epoll处理以后就可能从就绪转到未就绪，剩余的epoll虽然认为文件已就绪而实际上经过某些处理后已不可用。epoll的实现中考虑到了此问题，在每次添加新文件到epoll中时，就会首先检查是否会出现这样的唤醒风暴。

该函数的实现逻辑是这样的，递归调用reverse_path_check_proc遍历监听在当前文件上的epoll文件，在reverse_pach_check_proc中统计并检查不同路径深度上epoll的个数，从而避免产生唤醒风暴。
</div>

<strong>epoll 的唤醒过程</strong>
[cc lang="c"]
static void ep_poll_safewake(wait_queue_head_t *wq)  
{  
    int this_cpu = get_cpu();  
  
    ep_call_nested(&poll_safewake_ncalls, EP_MAX_NESTS,  
                   ep_poll_wakeup_proc, NULL, wq, (void *) (long) this_cpu);  
  
    put_cpu();  
}  
  
static int ep_poll_wakeup_proc(void *priv, void *cookie, int call_nests)  
{  
    ep_wake_up_nested((wait_queue_head_t *) cookie, POLLIN,  
                      1 + call_nests);  
    return 0;  
}  
  
static inline void ep_wake_up_nested(wait_queue_head_t *wqueue,  
                                     unsigned long events, int subclass)  
{  
    // 这回唤醒所有正在等待此epfd 的select/epoll/poll 等  
    // 如果唤醒的是epoll 就可能唤醒其他的epoll, 产生连锁反应  
    // 这个很可能在中断上下文中被调用  
    wake_up_poll(wqueue, events);  
}  
[/cc]

<strong> epoll_ctl</strong>
[cc lang="c"]
// long epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  
  
SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,  
                struct epoll_event __user *, event)  
{  
    int error;  
    int did_lock_epmutex = 0;  
    struct file *file, *tfile;  
    struct eventpoll *ep;  
    struct epitem *epi;  
    struct epoll_event epds;  
  
    error = -EFAULT;  
    if (ep_op_has_event(op) &&  
            // 复制用户空间数据到内核  
            copy_from_user(&epds, event, sizeof(struct epoll_event))) {  
        goto error_return;  
    }  
  
    // 取得 epfd 对应的文件  
    error = -EBADF;  
    file = fget(epfd);  
    if (!file) {  
        goto error_return;  
    }  
  
    // 取得目标文件  
    tfile = fget(fd);  
    if (!tfile) {  
        goto error_fput;  
    }  
  
    // 目标文件必须提供 poll 操作  
    error = -EPERM;  
    if (!tfile->f_op || !tfile->f_op->poll) {  
        goto error_tgt_fput;  
    }  
  
    // 添加自身或epfd 不是epoll 句柄  
    error = -EINVAL;  
    if (file == tfile || !is_file_epoll(file)) {  
        goto error_tgt_fput;  
    }  
  
    // 取得内部结构eventpoll  
    ep = file->private_data;  
  
    // EPOLL_CTL_MOD 不需要加全局锁 epmutex  
    if (op == EPOLL_CTL_ADD || op == EPOLL_CTL_DEL) {  
        mutex_lock(&epmutex);  
        did_lock_epmutex = 1;  
    }  
    if (op == EPOLL_CTL_ADD) {  
        if (is_file_epoll(tfile)) {  
            error = -ELOOP;  
            // 目标文件也是epoll 检测是否有循环包含的问题  
            if (ep_loop_check(ep, tfile) != 0) {  
                goto error_tgt_fput;  
            }  
        } else  
        {  
            // 将目标文件添加到 epoll 全局的tfile_check_list 中  
            list_add(&tfile->f_tfile_llink, &tfile_check_list);  
        }  
    }  
  
    mutex_lock_nested(&ep->mtx, 0);  
  
    // 以tfile 和fd 为key 在rbtree 中查找文件对应的epitem  
    epi = ep_find(ep, tfile, fd);  
  
    error = -EINVAL;  
    switch (op) {  
    case EPOLL_CTL_ADD:  
        if (!epi) {  
            // 没找到, 添加额外添加ERR HUP 事件  
            epds.events |= POLLERR | POLLHUP;  
            error = ep_insert(ep, &epds, tfile, fd);  
        } else {  
            error = -EEXIST;  
        }  
        // 清空文件检查列表  
        clear_tfile_check_list();  
        break;  
    case EPOLL_CTL_DEL:  
        if (epi) {  
            error = ep_remove(ep, epi);  
        } else {  
            error = -ENOENT;  
        }  
        break;  
    case EPOLL_CTL_MOD:  
        if (epi) {  
            epds.events |= POLLERR | POLLHUP;  
            error = ep_modify(ep, epi, &epds);  
        } else {  
            error = -ENOENT;  
        }  
        break;  
    }  
    mutex_unlock(&ep->mtx);  
  
error_tgt_fput:  
    if (did_lock_epmutex) {  
        mutex_unlock(&epmutex);  
    }  
  
    fput(tfile);  
error_fput:  
    fput(file);  
error_return:  
  
    return error;  
}  
[/cc]

<strong>EPOLL_CTL_ADD 实现</strong>
[cc lang="c"]
// EPOLL_CTL_ADD  
static int ep_insert(struct eventpoll *ep, struct epoll_event *event,  
                     struct file *tfile, int fd)  
{  
    int error, revents, pwake = 0;  
    unsigned long flags;  
    long user_watches;  
    struct epitem *epi;  
    struct ep_pqueue epq;  
    /* 
    struct ep_pqueue { 
        poll_table pt; 
        struct epitem *epi; 
    }; 
    */  
  
    // 增加监视文件数  
    user_watches = atomic_long_read(&ep->user->epoll_watches);  
    if (unlikely(user_watches >= max_user_watches)) {  
        return -ENOSPC;  
    }  
  
    // 分配初始化 epi  
    if (!(epi = kmem_cache_alloc(epi_cache, GFP_KERNEL))) {  
        return -ENOMEM;  
    }  
  
    INIT_LIST_HEAD(&epi->rdllink);  
    INIT_LIST_HEAD(&epi->fllink);  
    INIT_LIST_HEAD(&epi->pwqlist);  
    epi->ep = ep;  
    // 初始化红黑树中的key  
    ep_set_ffd(&epi->ffd, tfile, fd);  
    // 直接复制用户结构  
    epi->event = *event;  
    epi->nwait = 0;  
    epi->next = EP_UNACTIVE_PTR;  
  
    // 初始化临时的 epq  
    epq.epi = epi;  
    init_poll_funcptr(&epq.pt, ep_ptable_queue_proc);  
    // 设置事件掩码  
    epq.pt._key = event->events;  
    //  内部会调用ep_ptable_queue_proc, 在文件对应的wait queue head 上  
    // 注册回调函数, 并返回当前文件的状态  
    revents = tfile->f_op->poll(tfile, &epq.pt);  
  
    // 检查错误  
    error = -ENOMEM;  
    if (epi->nwait < 0) { // f_op->poll 过程出错  
        goto error_unregister;  
    }  
    // 添加当前的epitem 到文件的f_ep_links 链表  
    spin_lock(&tfile->f_lock);  
    list_add_tail(&epi->fllink, &tfile->f_ep_links);  
    spin_unlock(&tfile->f_lock);  
  
    // 插入epi 到rbtree  
    ep_rbtree_insert(ep, epi);  
  
    /* now check if we've created too many backpaths */  
    error = -EINVAL;  
    if (reverse_path_check()) {  
        goto error_remove_epi;  
    }  
  
    spin_lock_irqsave(&ep->lock, flags);  
  
    /* 文件已经就绪插入到就绪链表rdllist */  
    if ((revents & event->events) && !ep_is_linked(&epi->rdllink)) {  
        list_add_tail(&epi->rdllink, &ep->rdllist);  
  
  
        if (waitqueue_active(&ep->wq))  
            // 通知sys_epoll_wait , 调用回调函数唤醒sys_epoll_wait 进程  
        {  
            wake_up_locked(&ep->wq);  
        }  
        // 先不通知调用eventpoll_poll 的进程  
        if (waitqueue_active(&ep->poll_wait)) {  
            pwake++;  
        }  
    }  
  
    spin_unlock_irqrestore(&ep->lock, flags);  
  
    atomic_long_inc(&ep->user->epoll_watches);  
  
    if (pwake)  
        // 安全通知调用eventpoll_poll 的进程  
    {  
        ep_poll_safewake(&ep->poll_wait);  
    }  
  
    return 0;  
  
error_remove_epi:  
    spin_lock(&tfile->f_lock);  
    // 删除文件上的 epi  
    if (ep_is_linked(&epi->fllink)) {  
        list_del_init(&epi->fllink);  
    }  
    spin_unlock(&tfile->f_lock);  
  
    // 从红黑树中删除  
    rb_erase(&epi->rbn, &ep->rbr);  
  
error_unregister:  
    // 从文件的wait_queue 中删除, 释放epitem 关联的所有eppoll_entry  
    ep_unregister_pollwait(ep, epi);  
  
    /* 
     * We need to do this because an event could have been arrived on some 
     * allocated wait queue. Note that we don't care about the ep->ovflist 
     * list, since that is used/cleaned only inside a section bound by "mtx". 
     * And ep_insert() is called with "mtx" held. 
     */  
    // TODO:  
    spin_lock_irqsave(&ep->lock, flags);  
    if (ep_is_linked(&epi->rdllink)) {  
        list_del_init(&epi->rdllink);  
    }  
    spin_unlock_irqrestore(&ep->lock, flags);  
  
    // 释放epi  
    kmem_cache_free(epi_cache, epi);  
  
    return error;  
}  
[/cc]

<div class="alert alert-danger" role="alert"><del datetime="2019-12-30T05:53:44+00:00"> EPOLL_CTL_DELEPOLL_CTL_DEL 的实现调用的是 ep_remove 函数，函数只是清除ADD时， 添加的各种结EPOLL_CTL_MOD 的实现调用的是ep_modify，在ep_modify中用新的事件掩码调用f_ops->poll，检测事件是否已可用，如果可用就直接唤醒epoll，这两个的实现与EPOLL_CTL_ADD 类似，代码上比较清晰，这里就不具体分析了。</del></div>
<strong></strong>
<strong>epoll_wait</strong>
[cc lang="c"]
/* 
epoll_wait实现 
*/  
  
SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,  
                int, maxevents, int, timeout)  
{  
    int error;  
    struct file *file;  
    struct eventpoll *ep;  
  
    // 检查输入数据有效性  
    if (maxevents <= 0 || maxevents > EP_MAX_EVENTS) {  
        return -EINVAL;  
    }  
  
    if (!access_ok(VERIFY_WRITE, events, maxevents * sizeof(struct epoll_event))) {  
        error = -EFAULT;  
        goto error_return;  
    }  
  
    /* Get the "struct file *" for the eventpoll file */  
    error = -EBADF;  
    file = fget(epfd);  
    if (!file) {  
        goto error_return;  
    }  
  
    error = -EINVAL;  
    if (!is_file_epoll(file)) {  
        goto error_fput;  
    }  
    // 取得ep 结构  
    ep = file->private_data;  
  
    // 等待事件  
    error = ep_poll(ep, events, maxevents, timeout);  
  
error_fput:  
    fput(file);  
error_return:  
  
    return error;  
}  
  
static int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,  
                   int maxevents, long timeout)  
{  
    int res = 0, eavail, timed_out = 0;  
    unsigned long flags;  
    long slack = 0;  
    wait_queue_t wait;  
    ktime_t expires, *to = NULL;  
  
    if (timeout > 0) {  
        // 转换为内核时间  
        struct timespec end_time = ep_set_mstimeout(timeout);  
  
        slack = select_estimate_accuracy(&end_time);  
        to = &expires;  
        *to = timespec_to_ktime(end_time);  
    } else if (timeout == 0) {  
        // 已经超时直接检查readylist  
        timed_out = 1;  
        spin_lock_irqsave(&ep->lock, flags);  
        goto check_events;  
    }  
  
fetch_events:  
    spin_lock_irqsave(&ep->lock, flags);  
  
    // 没有可用的事件，ready list 和ovflist 都为空  
    if (!ep_events_available(ep)) {  
  
        // 添加当前进程的唤醒函数  
        init_waitqueue_entry(&wait, current);  
        __add_wait_queue_exclusive(&ep->wq, &wait);  
  
        for (;;) {  
            /* 
             * We don't want to sleep if the ep_poll_callback() sends us 
             * a wakeup in between. That's why we set the task state 
             * to TASK_INTERRUPTIBLE before doing the checks. 
             */  
            set_current_state(TASK_INTERRUPTIBLE);  
            if (ep_events_available(ep) || timed_out) {  
                break;  
            }  
            if (signal_pending(current)) {  
                res = -EINTR;  
                break;  
            }  
  
            spin_unlock_irqrestore(&ep->lock, flags);  
            // 挂起当前进程，等待唤醒或超时  
            if (!schedule_hrtimeout_range(to, slack, HRTIMER_MODE_ABS)) {  
                timed_out = 1;  
            }  
  
            spin_lock_irqsave(&ep->lock, flags);  
        }  
      
        __remove_wait_queue(&ep->wq, &wait);  
  
        set_current_state(TASK_RUNNING);  
    }  
check_events:  
    // 再次检查是否有可用事件  
    eavail = ep_events_available(ep);  
  
    spin_unlock_irqrestore(&ep->lock, flags);  
  
    /* 
     * Try to transfer events to user space. In case we get 0 events and 
     * there's still timeout left over, we go trying again in search of 
     * more luck. 
     */  
    if (!res && eavail   
            && !(res = ep_send_events(ep, events, maxevents)) // 复制事件到用户空间  
            && !timed_out) // 复制事件失败并且没有超时，重新等待。  
            {  
        goto fetch_events;  
    }  
  
    return res;  
}  
  
  
static inline int ep_events_available(struct eventpoll *ep)  
{  
    return !list_empty(&ep->rdllist) || ep->ovflist != EP_UNACTIVE_PTR;  
}  
  
struct ep_send_events_data {  
    int maxevents;  
    struct epoll_event __user *events;  
};  
  
static int ep_send_events(struct eventpoll *ep,  
                          struct epoll_event __user *events, int maxevents)  
{  
    struct ep_send_events_data esed;  
  
    esed.maxevents = maxevents;  
    esed.events = events;  
  
    return ep_scan_ready_list(ep, ep_send_events_proc, &esed, 0);  
}  
  
static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,  
                               void *priv)  
{  
    struct ep_send_events_data *esed = priv;  
    int eventcnt;  
    unsigned int revents;  
    struct epitem *epi;  
    struct epoll_event __user *uevent;  
  
    // 遍历已就绪链表  
    for (eventcnt = 0, uevent = esed->events;  
            !list_empty(head) && eventcnt < esed->maxevents;) {  
        epi = list_first_entry(head, struct epitem, rdllink);  
  
        list_del_init(&epi->rdllink);  
        // 获取ready 事件掩码  
        revents = epi->ffd.file->f_op->poll(epi->ffd.file, NULL) &  
                  epi->event.events;  
  
        /* 
         * If the event mask intersect the caller-requested one, 
         * deliver the event to userspace. Again, ep_scan_ready_list() 
         * is holding "mtx", so no operations coming from userspace 
         * can change the item. 
         */  
        if (revents) {  
            // 事件就绪, 复制到用户空间  
            if (__put_user(revents, &uevent->events) ||  
                    __put_user(epi->event.data, &uevent->data)) {  
                list_add(&epi->rdllink, head);  
                return eventcnt ? eventcnt : -EFAULT;  
            }  
            eventcnt++;  
            uevent++;  
            if (epi->event.events & EPOLLONESHOT) {  
                epi->event.events &= EP_PRIVATE_BITS;  
            } else if (!(epi->event.events & EPOLLET)) {  
                // 不是边缘模式, 再次添加到ready list,  
                // 下次epoll_wait 时直接进入此函数检查ready list是否仍然继续  
                list_add_tail(&epi->rdllink, &ep->rdllist);  
            }  
            // 如果是边缘模式, 只有当文件状态发生改变时,  
            // 才文件会再次触发wait_address 上wait_queue的回调函数,  
        }  
    }  
  
    return eventcnt;  
}  
[/cc]

<strong>poll/select/epoll 对比</strong>


<blockquote>通过以上的分析可以看出，poll和select的实现基本是一致，只是用户到内核传递的数据格式有所不同，

select和poll即使只有一个描述符就绪，也要遍历整个集合。如果集合中活跃的描述符很少，遍历过程的开销就会变得很大，而如果集合中大部分的描述符都是活跃的，遍历过程的开销又可以忽略。

epoll的实现中每次只遍历活跃的描述符(如果是水平触发，也会遍历先前活跃的描述符)，在活跃描述符较少的情况下就会很有优势，在代码的分析过程中可以看到epoll的实现过于复杂并且其实现过程中需要同步处理(锁)，如果大部分描述符都是活跃的，epoll的效率可能不如select或poll。(参见epoll 和poll的性能测试 http://jacquesmattheij.com/Poll+vs+Epoll+once+again)

select能够处理的最大fd无法超出FDSETSIZE。

select会复写传入的fd_set 指针，而poll对每个fd返回一个掩码，不更改原来的掩码，从而可以对同一个集合多次调用poll，而无需调整。

select对每个文件描述符最多使用3个bit，而poll采用的pollfd需要使用64个bit，epoll采用的 epoll_event则需要96个bit

如果事件需要循环处理select, poll 每一次的处理都要将全部的数据复制到内核，而epoll的实现中，内核将持久维护加入的描述符，减少了内核和用户复制数据的开销。
</blockquote>

<div class="alert alert-info" role="alert">
epoll_create
从slab缓存中创建一个eventpoll对象,并且创建一个匿名的fd跟fd对应的file对象,
而eventpoll对象保存在struct file结构的private指针中,并且返回,
该fd对应的file operations只是实现了poll跟release操作

创建eventpoll对象的初始化操作
获取当前用户信息,是不是root,最大监听fd数目等并且保存到eventpoll对象中
初始化等待队列,初始化就绪链表,初始化红黑树的头结点

epoll_ctl操作
将epoll_event结构拷贝到内核空间中
并且判断加入的fd是否支持poll结构(epoll,poll,selectI/O多路复用必须支持poll操作).
并且从epfd->file->privatedata获取event_poll对象,根据op区分是添加删除还是修改,
首先在eventpoll结构中的红黑树查找是否已经存在了相对应的fd,没找到就支持插入操作,否则报重复的错误.
相对应的修改,删除比较简单就不啰嗦了

插入操作时,会创建一个与fd对应的epitem结构,并且初始化相关成员,比如保存监听的fd跟file结构之类的
重要的是指定了调用poll_wait时的回调函数用于数据就绪时唤醒进程,(其内部,初始化设备的等待队列,将该进程注册到等待队列)完成这一步, 我们的epitem就跟这个socket关联起来了, 当它有状态变化时,
会通过ep_poll_callback()来通知.
最后调用加入的fd的file operation->poll函数(最后会调用poll_wait操作)用于完成注册操作.
最后将epitem结构添加到红黑树中

epoll_wait操作
计算睡眠时间(如果有),判断eventpoll对象的链表是否为空,不为空那就干活不睡明.并且初始化一个等待队列,把自己挂上去,设置自己的进程状态
为可睡眠状态.判断是否有信号到来(有的话直接被中断醒来,),如果啥事都没有那就调用schedule_timeout进行睡眠,如果超时或者被唤醒,首先从自己初始化的等待队列删除
,然后开始拷贝资源给用户空间了
拷贝资源则是先把就绪事件链表转移到中间链表,然后挨个遍历拷贝到用户空间,
并且挨个判断其是否为水平触发,是的话再次插入到就绪链表
</div>
<strong></strong>
<strong>文章</strong>
<strong></strong>
<a href="https://www.iteye.com/blog/watter1985-1614039" rel="noopener noreferrer" target="_blank">linux 内核poll/select/epoll实现剖析</a>
<a href="https://blog.csdn.net/runner668/article/details/80498202" rel="noopener noreferrer" target="_blank">epoll内核源码详解+自己总结的流程</a>
<a href="https://blog.csdn.net/baiye_xing/article/details/76352935" rel="noopener noreferrer" target="_blank">【Linux深入】epoll源码剖析</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2019-10-25 14:55:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-25 06:55:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[epoll%e6%ba%90%e7%a0%81%e5%89%96%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="yuanma"><![CDATA[源码刨析]]></category>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b"><![CDATA[网络编程]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-12-30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>红黑树与平衡二叉树</title>
		<link>http://114.116.235.65/2019/12/31/359/%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91.html</link>
		<pubDate>Tue, 31 Dec 2019 06:26:35 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=359</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>二叉查找树</h3>

在对于二叉查找树的学习过程中，个人的理解是它是将二分法的优势特点以数据结构的特定形式展现出来，形成一种特定的数据集合方式规则。

<h4>结构特点</h4>

（1）若左子树不空，则左子树上所有节点的值均小于它的根节点的值
（2）若右子树不空，则右子树上所有节点的值均大于它的根节点的值
（3）左、右子树也分别为二叉排序树
（4）没有键值相等的节点

<pre><code class="language-cpp ">typedef struct BSTreeNode
{
     int data;
    struct BSTreeNode *left;//左子树
     struct BSTreeNode *right;//右子树
}BSTree;
</code></pre>

<h4>性质</h4>

<a href="http://114.116.235.65/wp-content/uploads/2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg"><img src="http://114.116.235.65/wp-content/uploads/2019/12/v2-d60beaed02a5adf399d960368d6e1288_hd.jpg" alt="" /></a><a href="http://114.116.235.65/wp-content/uploads/2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg"><img src="http://114.116.235.65/wp-content/uploads/2019/12/v2-2891440582c8f79cb594f503f3721287_hd.jpg" alt="" /></a>

<hr />

<h3>红黑树的定义</h3>

<ol>
<li>性质1. 节点是红色或黑色。</li>
<li>性质2. 根节点是黑色。</li>
<li>性质3 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li>
<li>性质4. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</li>
</ol>

<hr />

<strong>这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。</strong>

<img src="http://114.116.235.65/wp-content/uploads/2019/12/QQ图片20191230183740.png" alt="实例" />
　红黑树的时间复杂度为O(log n)。由平衡二叉树我们可以知道其高度约为 log2n（再添加数据时通过不断的调整达到平衡)。而红黑树的高度为多少呢？
这里有一个定理：一个含有n个节点的红黑树的高度最多为2log n。我们可以这样来理解： 对于上面的那个图示，如果我们去掉所有的红色节点，结果会变成下图。
<a href="http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858-1.png"><img src="http://114.116.235.65/wp-content/uploads/2019/12/1639597-20190406113434223-2039183858-1.png" alt="四叉树" /></a>
这时由于有些节点没有父节点了，我们直接拿到他的祖父节点来充当其父节点，所以之前的二叉树就变成了四叉树。在前面红黑树的定义里有这么一条：从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点。我们从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度log2n还要小。而现在当我们再把红色节点加回去时，由于前面的定义红色点之间不能相邻，所以现在红黑树的高度会比log2n大，但是最大不会超过2log2n(因为之前全部黑色节点时，的高度不会超过log2n)。

<h4>小结</h4>

　　因此，由于红黑树的高度只比平衡树的高度大了一倍，但是在性能上，下降的并不是很多。在实际运用中，AVL 树是一种高度平衡的二叉树，查找的效率非常高，但是，AVL 树为了维持这种高度的平衡，就需要进行更多的操作来保持这种平衡。每次插入、删除都要做调整，就比较复杂、耗时。所以，对于有频繁的插入、删除操作的数据集合，使用 AVL 树的代价就有点高了。而红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比 AVL 树要低。所以，红黑树的插入、删除、查找各种操作性能都比较稳定。对于工程应用来说，要面对各种异常情况，为了支撑这种工业级的应用，我们更倾向于这种性能稳定的平衡二叉查找树。

<hr />

<h3>红黑树的相关定理</h3>

红黑树相关定理：

<ol>
<li>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。

根据上面的性质5我们知道上图的红黑树每条路径上都是3个黑结点。因此最短路径长度为2(没有红结点的路径)。再根据性质4(两个红结点不能相连)和性质1，2(叶子和根必须是黑结点)。那么我们可以得出：一条具有3个黑结点的路径上最多只能有2个红结点(红黑间隔存在)。也就是说黑深度为2（根结点也是黑色）的红黑树最长路径为4，最短路径为2。从这一点我们可以看出红黑树是 大致平衡的。 (当然比平衡二叉树要差一些，AVL的平衡因子最多为1)</p></li>
<li><p>红黑树的树高(h)不大于两倍的红黑树的黑深度(bd)，即h&lt;=2bd

根据定理1，我们不难说明这一点。bd是红黑树的最短路径长度。而可能的最长路径长度(树高的最大值)就是红黑相间的路径，等于2bd。因此h&lt;=2bd。</p></li>
<li><p>一棵拥有n个内部结点(不包括叶子结点)的红黑树的树高h&lt;=2log(n+1)

下面我们首先证明一颗有n个内部结点的红黑树满足n>=2^bd-1。这可以用数学归纳法证明，施归纳于树高h。当h=0时，这相当于是一个叶结点，黑高度bd为0，而内部结点数量n为0，此时0>=2^0-1成立。假设树高h&lt;=t时，n>=2^bd-1成立，我们记一颗树高 为t+1的红黑树的根结点的左子树的内部结点数量为nl，右子树的内部结点数量为nr，记这两颗子树的黑高度为bd'（注意这两颗子树的黑高度必然一 样），显然这两颗子树的树高&lt;=t，于是有nl>=2^bd'-1以及nr>=2^bd'-1，将这两个不等式相加有nl+nr>=2^(bd'+1)-2，将该不等式左右加1，得到n>=2^(bd'+1)-1，很显然bd'+1>=bd，于是前面的不等式可以 变为n>=2^bd-1，这样就证明了一颗有n个内部结点的红黑树满足n>=2^bd-1。</p></li>
</ol>

<p><strong>在根据定理2，h&lt;=2bd。即n>=2^(h/2)-1，那么h&lt;=2log(n+1)从这里我们能够看出，红黑树的查找长度最多不超过2log(n+1)，因此其查找时间复杂度也是O(log N)级别的。</strong> 因为每一个红黑树也是一个特化的二叉查找树，因此红黑树上的查找操作与普通二叉查找树上的查找操作相同。然而，在红黑树上进行插入操作和删除操作会导致不 再符合红黑树的性质。恢复红黑树的属性需要少量(O(log n))的颜色变更(实际是非常快速的)和不超过三次树旋转(对于插入操作是两次)。 虽然插入和删除很复杂，但操作时间仍可以保持为 O(log n) 次 。

<code>红黑树能够以O(log2(N))的时间复杂度进行搜索、插入、删除操作。此外,任何不平衡都会在3次旋转之内解决。这一点是AVL所不具备的。</code>

文章：
<a href="https://zhuanlan.zhihu.com/p/29867652" title="通俗易懂讲解 二叉搜索树">通俗易懂讲解 二叉搜索树</a>
<a href="https://blog.csdn.net/chudelong1/article/details/82698010" title="漫画算法：什么是红黑树？（适合初学红黑树小白简单易懂）">漫画算法：什么是红黑树？（适合初学红黑树小白简单易懂）</a>
<a href="https://www.cnblogs.com/gofighting/p/5437998.html" title="为什么红黑树的效率比较高">为什么红黑树的效率比较高</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date><![CDATA[2019-12-31 14:26:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-31 06:26:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ba%a2%e9%bb%91%e6%a0%91%e4%b8%8e%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[371]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>TCP三次握手四次挥手</title>
		<link>http://114.116.235.65/2019/11/28/388/tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b.html</link>
		<pubDate>Thu, 28 Nov 2019 09:05:20 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=388</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

<h3>tcp通信</h3>

TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议。它是在网络的使用中的最基本的通信协议。TCP/IP传输协议对互联网中各部分进行通信的标准和方法进行了规定。并且，TCP/IP传输协议是保证网络数据信息及时、完整传输的两个重要的协议。TCP/IP传输协议是严格来说是一个四层的体系结构，应用层、传输层、网络层和数据链路层都包含其中。用户进程和服务器进程需要完成一次通信都需要完成三个阶段：

<hr />

<ol>
<li>连接建立</li>
<li>数据传送</li>
<li>连接释放</li>
</ol>

<hr />

TCP协议中，主动发起请求的一端称为客户端，被动连接的一端称为服务端。由于全双工，不管是客户端还是服务端，TCP连接建立完后都能发送和接收数据。

<h3>tcp符号</h3>

<a href="http://114.116.235.65/wp-content/uploads/2019/12/20180717201939345-1.jpg"><img src="http://114.116.235.65/wp-content/uploads/2019/12/20180717201939345-1.jpg" alt="" /></a>

<hr />

<ul>
<li>序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</p></li>
<li><p>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。</p></li>
<li><p>确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</p></li>
<li><p>同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p></li>
<li><p>终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p></li>
<li><p>PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</p></li>
</ul>

<hr />

<h2>三次握手</h2>

<h3>三报文握手</h3>

<p>TCP三次握手中的三次，连接建立，其实是指一次握手中交换了三个报文，进行了三次信息的单向传递，而不是真正进行了三次握手。用英文就是 three messages handshake，这里的handshake是单数形式。所以，三次握手其实是三报文握手。

而TCP四次挥手，也就是在连接释放的过程中，需要交换四个报文。

<a href="http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107194907929-4971949.png"><img src="http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107194907929-4971949.png" alt="" /></a>

最初两端的TCP进程都处于CLOSED关闭状态，A主动打开连接，而B被动打开连接。（A、B关闭状态CLOSED——B收听状态LISTEN——A同步已发送状态SYN-SENT——B同步收到状态SYN-RCVD——A、B连接已建立状态ESTABLISHED）

<h3>TCP三次握手过程</h3>

B的TCP服务器进程先创建传输控制块TCB，准备接受客户进程的连接请求。然后服务器进程就处于LISTEN（收听）状态，等待客户的连接请求。若有，则作出响应。
1. 第一次握手：A的TCP客户进程也是首先创建传输控制块TCB，然后向B发出连接请求报文段，（首部的同步位SYN=1，初始序号seq=x），（SYN=1的报文段不能携带数据）但要消耗掉一个序号，此时TCP客户进程进入SYN-SENT（同步已发送）状态。
2. 第二次握手：B收到连接请求报文段后，如同意建立连接，则向A发送确认，在确认报文段中（SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y），测试TCP服务器进程进入SYN-RCVD（同步收到）状态；
2. 第三次握手：TCP客户进程收到B的确认后，要向B给出确认报文段（ACK=1，确认号ack=y+1，序号seq=x+1）（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。TCP连接已经建立，A进入ESTABLISHED（已建立连接）。当B收到A的确认后，也进入ESTABLISHED状态。

<h2>四次挥手</h2>

<h3>四报文挥手</h3>

TCP连接是双向的，在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。

<a href="http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107202912207-1921343718.png"><img src="http://114.116.235.65/wp-content/uploads/2019/12/1367382-20181107202912207-1921343718.png" alt="" /></a>

数据传输结束后，通信的双方都可释放连接，A和B都处于ESTABLISHED状态。（A、B连接建立状态ESTABLISHED——A终止等待1状态FIN-WAIT-1——B关闭等待状态CLOSE-WAIT——A终止等待2状态FIN-WAIT-2——B最后确认状态LAST-ACK——A时间等待状态TIME-WAIT——B、A关闭状态CLOSED）

<h3>TCP四次挥手过程</h3>

<ol>
<li>A的应用进程先向其TCP发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN-WAIT-1（终止等待1）状态，等待B的确认。</li>
<li>B收到连接释放报文段后即发出确认报文段，（ACK=1，确认号ack=u+1，序号seq=v），B进入CLOSE-WAIT（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。</li>
<li>A收到B的确认后，进入FIN-WAIT-2（终止等待2）状态，等待B发出的连接释放报文段。</li>
<li>B没有要向A发出的数据，B发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），B进入LAST-ACK（最后确认）状态，等待A的确认。</li>
<li>A收到B的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），A进入TIME-WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，A才进入CLOSED状态。</li>
</ol>

客户端发送FIN后，进入终止等待状态，服务器收到客户端连接释放报文段后，就立即给客户端发送确认，服务器就进入CLOSE_WAIT状态，此时TCP服务器进程就通知高层应用进程，因而从客户端到服务器的连接就释放了。此时是“半关闭状态”，即客户端不可以发送给服务器，服务器可以发送给客户端。
此时，如果服务器没有数据报发送给客户端，其应用程序就通知TCP释放连接，然后发送给客户端连接释放数据报，并等待确认。客户端发送确认后，进入TIME_WAIT状态，但是此时TCP连接还没有释放，然后经过等待计时器设置的2MSL后，才进入到CLOSE状态。

<h2>问题总结</h2>

为什么连接的时候是三次握手，关闭的时候却是四次握手？

<ul>
<li>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</li>
</ul>

为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？

<ul>
<li>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</li>
</ul>

为什么不能用两次握手进行连接？

<ul>
<li>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。</li>
<li>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</li>
</ul>

如果已经建立了连接，但是客户端突然出现故障了怎么办？

<ul>
<li>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</li>
</ul>

<h2>tcp相关机制</h2>

<strong>TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</strong>

<h3>确认应答</h3>

在TCP中，当发送端的数据到达接收主机时，接收端主机会返回一 个已收到消息的通知。这个消息叫做确认应答（ACK（Positive Acknowled-gement）意指已经接收。）

TCP通过肯定的ACK实现可靠的数据传输。当发送端将数据发出之后会等待对端的确认应答。如果有确认应答，说明数据已经成功到达对端。反之，则数据丢失的可能性很大。在一定时间内没有等到确认应答，发送端就可以认为数据已经丢失，并进行重发。

<blockquote>
  注意：未收到确认应答并不意味着数据一定丢失。也有可能是数据对方已经收到，只是返回的确认应答在途中丢失。这种情况也会导致发送端因没有收到确认应答，而认为数据没有到达目的地，从而进行重新发送。但是对于目标主机来说，这简直是一种“灾难”。它会反复收到相同的数据。而为了对上层应用提供可靠的传输，必须得放弃重复的数据包。为此，就必须引入一种机制，它能够识别是否已经接收数据，又能够判断是否需要接收。
</blockquote>

<h3>序列号</h3>

上述这些确认应答处理、重发控制以及重复控制等功能都可以通过序列号实现。序列号是按顺序给发送数据的每一个字节（8位字节）都标上号码的编号（序列号的初始值并非为0。而是在建立连接以后由随 机数生成。而后面的计算则是对每一字节加一） 。接收端查询接收数据TCP首部中的序列号和数据的长度，将自己下一步应该接收的序号作为确认应答返送回去。就这样，通过序列号和确认应答号，TCP可以实现可靠传输。

<h3>重发超时</h3>

重发超时是指在重发数据之前，等待确认应答到来的那个特定时间间隔。如果超过了这个时间仍未收到确认应答，发送端将进行数据重发。那么这个重发超时的具体时间长度又是如何确定的呢？

最理想的是，找到一个最小时间，它能保证“确认应答一定能在这个时间内返回”。然而这个时间长短随着数据包途径的网络环境的不同而有所变化。TCP要求不论处在何种网络环境下都要提供高性能通信，并且无论网络拥堵情况发生何种变化，都必须保持这一特性。为此，它在每次发包时都会计算往返时间（Round Trip Time也叫RTT。是指报文段的往返时间。） 及其偏差（RTT时间波动的值、方差。有时也叫抖动。） 。将这个往返时间和偏差相加。

<blockquote>
  数据也不会被无限、反复地重发。达到一定重发次数之后，如果仍没有任何确认应答返回，就会判断为网络或对端主机发生了异常，强制关闭连接。并且通知应用通信异常强行终止。
</blockquote>

<h3>连接管理</h3>

TCP提供面向有连接的通信传输。面向有连接是指在数据通信开始之前先做好通信两端之间的准备工作。它会在数据通信之前，通过TCP首部发送一个SYN包作为建立连接的请求等待确认应答（TCP中发送第一个SYN包的一方叫做客户端，接收这个的一方叫做服务端。） 如果对端发来确认应答，则认为可以进行数据通信。如果对端的确认应答未能到达，就不会进行数据通信。此外，在通信结束时会进行断开连接的处理（通过发送FIN包）。

可以使用TCP首部用于控制的字段来管理TCP连接（也叫控制域） 。一个连接的建立与断开，正常过程至少需要来回发送7个包才能完成（“三次握手”、“四次挥手”） 。

<h3>窗口控制</h3>

<ul>
<li>TCP以1个段为单位，每发一个段进行一次确认应答的处理这样的传输方式有一个缺点。那就是包的往返时间越长通信性能就越低。为解决这个问题，TCP引入了窗口这个概念。即使在往返时间较长的情况下，它也能控制网络性能的下降。确认应答不再是以每个分段，而是以更大的单位进行确认，转发时间将会被大幅度的缩短。也就是说，发送端主机，在发送了一个段以后不必要一直等待确认应答，而是继续发送。
<img src="https://upload-images.jianshu.io/upload_images/1797490-bd967f977e83d59e.png?imageMogr2/auto-orient/strip|imageView2/2/w/510/format/webp" alt="" /></li>
<li>窗口大小就是指无需等待确认应答而可以继续发送数据的最大值。这个机制实现使用大量的缓冲区。</p></li>
<li><p>TCP提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流控制。它的具体操作是，接收端主机向发送端主机通知自己可以接收数据的大小，于是发送端会发送不超过这个限度的数据。该大小限度就被称作窗口大小。窗口大小的值就是由接收端主机决定的。 TCP首部中，专门有一个字段用来通知窗口大小。接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端。这个字段的值越大，说明网络的吞吐量越高。</p></li>
<li><p>收到确认应答的情况下，将窗口滑动到确认应答中的序列号的位置。这样可以顺序地将多个段同时发送提高通信性能。这种机制也被称为滑动窗口控制。</p></li>
<li><p>窗口控制下的重发控制
重发的情况就两种：一种是数据收到了，应答没有收到，第二种是数据没有收到。</p></li>
<li><p>先考虑确认应答未能返回的情况。在这种情况下，数据已经到达对端，是不需要再进行重发的。然而，在没有使用窗口控制的时候，没有收到确认应答的数据都会被重发。</p></li>
<li><p>其次，考虑一下某个报文段丢失的情况。当某一报文段丢失后，发送端会一直收到序号为1001的确认应答，这个确认应答好像在提醒发送端“我想接收的是从1001开始的数据”。因此，在窗口比较大，又出现报文段丢失的情况 下，同一个序号的确认应答将会被重复不断地返回。而发送端主机如果连续3次收到同一个确认应答（之所以连续收到3次而不是两次的理由是因为，即使数据段的序号被替换两次也不会触发重发机制。） ，就会将其所对应的数据进行重发。这种机制比之前提到的超时管理更加高效，因此也被称作高速重发控制。</p></li>
<li><p>接收端如果没有收到自己所期望的数据时，会将之前收到的数据进行确认应答，发送端一旦连续3次收到相同的确认应答，就会进行数据的重发。</p></li>
</ul>

<h3>拥塞控制</h3>

<p>有了TCP的窗口控制，收发主机之间即使不再以一个数据段为单位发送确认应答，也能够连续发送大量数据包。然而，如果在通信刚开始时就发送大量数据，也可能会引发其他问题。 一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。在网络出现拥堵时，如果突然发送一个较大量的数据，极有可能会导致整个网络的瘫痪。 TCP为了防止该问题的出现，在通信一开始时就会通过一个叫做慢启动的算法得出的数值，对发送数据量进行控制。

<hr />

<strong>文章：</strong>
<a href="https://www.jianshu.com/p/ca64764e4a26" title="理解TCP">理解TCP</a>
<a href="https://blog.csdn.net/qq_38950316/article/details/81087809">TCP的三次握手与四次挥手理解</a>
<a href="https://www.cnblogs.com/welan/p/9925119.html">TCP三次握手与四次挥手</a>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>388</wp:post_id>
		<wp:post_date><![CDATA[2019-11-28 17:05:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-28 09:05:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tcp%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="tcp"><![CDATA[TCP]]></category>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b"><![CDATA[网络编程]]></category>
		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c"><![CDATA[计算机网络]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c"><![CDATA[计算机网络]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-12-31]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[389]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>书签集合1</title>
		<link>http://114.116.235.65/2020/01/01/402/%e4%b9%a6%e7%ad%be%e9%9b%86%e5%90%881.html</link>
		<pubDate>Wed, 01 Jan 2020 06:05:47 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>书签</strong>
<a href="http://114.116.235.65/wp-content/uploads/2020/01/bookmarks_2020_1_1-1.html">bookmarks&#95;2020&#95;1&#95;1</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 14:05:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 06:05:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b9%a6%e7%ad%be%e9%9b%86%e5%90%881]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>gdb调试</title>
		<link>http://114.116.235.65/2020/01/02/414/gdb%e8%b0%83%e8%af%95.html</link>
		<pubDate>Thu, 02 Jan 2020 10:56:40 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=414</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>gdb调试</h2>

在对目标文件进行编译时需要加上 <strong>-g</strong>选项 g++ -g -c gdbtest.cpp gdbtest

<h3>常用命令</h3>

<ul>
<li><p>回车键：重复上一命令</p></li>
<li><p>（gdb）help：查看命令帮助，具体命令查询在gdb中输入help + 命令,简写h</p></li>
<li><p>（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）,简写r</p></li>
<li><p>（gdb）start：单步执行，运行程序，停在第一执行语句</p></li>
<li><p>（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）,简写l</p></li>
<li><p>（gdb）set：设置变量的值</p></li>
<li><p>（gdb）next：单步调试（逐过程，函数直接执行）,简写n</p></li>
<li><p>（gdb）step：单步调试（逐语句：跳入自定义函数内部执行）,简写s</p></li>
<li><p>（gdb）backtrace：查看函数的调用的栈帧和层级关系,简写bt</p></li>
<li><p>（gdb）frame：切换函数的栈帧,简写f</p></li>
<li><p>（gdb）info：查看函数内部局部变量的数值,简写i</p></li>
<li><p>（gdb）finish：结束当前函数，返回到函数调用点</p></li>
<li><p>（gdb）continue：继续运行,简写c</p></li>
<li><p>（gdb）print：打印值及地址,简写p</p></li>
<li><p>（gdb）quit：退出gdb,简写q</p></li>
</ul>

<hr />

<ul>
<li><p>（gdb）break+num：在第num行设置断点,简写b</p></li>
<li><p>（gdb）info breakpoints：查看当前设置的所有断点</p></li>
<li><p>（gdb）delete breakpoints num：删除第num个断点,简写d</p></li>
<li><p>（gdb）display：追踪查看具体变量值</p></li>
<li><p>（gdb）undisplay：取消追踪观察变量</p></li>
<li><p>（gdb）watch：被设置观察点的变量发生修改时，打印显示</p></li>
<li><p>（gdb）i watch：显示观察点</p></li>
<li><p>（gdb）enable breakpoints：启用断点</p></li>
<li><p>（gdb）disable breakpoints：禁用断点</p></li>
<li><p>（gdb）x：查看内存x/20xw 显示20个单元，16进制，4字节每单元</p></li>
<li><p>（gdb）run argv[1] argv[2]：调试时命令行传参</p></li>
<li><p>（gdb）set follow-fork-mode child#Makefile项目管理：选择跟踪父子进程（fork()）</p></li>
<li><p>core文件：先用$ ulimit -c 1024 开启core，当程序出错会自动生成core文件。调试时 gdb a.out core</p></li>
<li><p>ctrl+c：退出输入</p></li>
</ul>

<h3>部分运行过程</h3>

<pre><code class="language-shell ">yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ g++ -g -c testfrist.cpp
testfrist.cpp: In function ‘void* threadproc1(void*)’:
testfrist.cpp:16:67: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘pthread_t {aka long unsigned int}’ [-Wformat=]
     printf("I am threadproc1, tid:%u, i:%d\n", pthread_self(), i++);
                                                                   ^
testfrist.cpp: In function ‘void* threadproc2(void*)’:
testfrist.cpp:28:67: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘pthread_t {aka long unsigned int}’ [-Wformat=]
     printf("I am threadproc2, tid:%u, i:%d\n", pthread_self(), i++);
                                                                   ^
testfrist.cpp: In function ‘int main(int, const char**)’:
testfrist.cpp:48:18: warning: deprecated conversion from string constant to ‘char*’ [-Wwrite-strings]
     char* pend = "main end\n";
                  ^
testfrist.cpp:49:16: warning: format not a string literal and no format arguments [-Wformat-security]
     printf(pend);
                ^
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ g++ -o testfrist testfrist.o -lpthread
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ ls
testfrist  testfrist.cpp  testfrist.o
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ gdb testfrist 
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
&lt;http://www.gnu.org/software/gdb/documentation/&gt;.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from testfrist...done.
(gdb) b 37
Breakpoint 1 at 0x400907: file testfrist.cpp, line 37.
(gdb) run " 黑色发货速度恢复速度回复的速回复"
Starting program: /home/yconiontest/test/gdb_test/testfrist " 黑色发货速度恢复速度回复的速回复"
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (narg=2, args=0x7fffffffe4d8) at testfrist.cpp:37
37      const char* pstr = args[1];
(gdb) p args[0]
$1 = 0x7fffffffe715 "/home/yconiontest/test/gdb_test/testfrist"
(gdb) display args[1]
1: args[1] = 0x7fffffffe73f " 黑色发货速度恢复速度回复的速回复"
(gdb) n
38      printinfo(pstr);
1: args[1] = 0x7fffffffe73f " 黑色发货速度恢复速度回复的速回复"
(gdb) s
printinfo (pstr=0x7fffffffe73f " 黑色发货速度恢复速度回复的速回复") at testfrist.cpp:9
9       printf("%s\n", pstr);
(gdb) up 
#1  0x000000000040091f in main (narg=2, args=0x7fffffffe4d8) at testfrist.cpp:38
38      printinfo(pstr);
(gdb) list
33  }
34  
35  int main(int narg, const char** args)
36  {
37      const char* pstr = args[1];
38      printinfo(pstr);
39  
40      pthread_t tid1,tid2;
41      pthread_create(&amp;tid1,NULL,threadproc1,NULL);//创建线程1
42      pthread_create(&amp;tid2,NULL,threadproc2,NULL);//创建线程2
(gdb) info threads
  Id   Target Id         Frame 
* 1    Thread 0x7ffff7feb700 (LWP 7136) "testfrist" 0x000000000040091f in main (narg=2, 
    args=0x7fffffffe4d8) at testfrist.cpp:38
(gdb) bt full
#0  printinfo (pstr=0x7fffffffe73f " 黑色发货速度恢复速度回复的速回复")
    at testfrist.cpp:9
No locals.
#1  0x000000000040091f in main (narg=2, args=0x7fffffffe4d8) at testfrist.cpp:38
        pstr = 0x7fffffffe73f " 黑色发货速度恢复速度回复的速回复"
        tid1 = 0
        tid2 = 4196832
        pend = 0x7fffffffe4d0 "\002"
(gdb) c
Continuing.
 黑色发货速度恢复速度回复的速回复
[New Thread 0x7ffff77ef700 (LWP 7140)]
I am threadproc1, tid:4152293120, i:0
[New Thread 0x7ffff6fee700 (LWP 7141)]
I am threadproc2, tid:4143900416, i:0
I am threadproc1, tid:4152293120, i:1
I am threadproc2, tid:4143900416, i:1
I am threadproc1, tid:4152293120, i:2
I am threadproc2, tid:4143900416, i:2
I am threadproc1, tid:4152293120, i:3
I am threadproc2, tid:4143900416, i:3
I am threadproc1, tid:4152293120, i:4
I am threadproc2, tid:4143900416, i:4
I am threadproc1, tid:4152293120, i:5
I am threadproc2, tid:4143900416, i:5
I am threadproc1, tid:4152293120, i:6
I am threadproc2, tid:4143900416, i:6
I am threadproc1, tid:4152293120, i:7
I am threadproc2, tid:4143900416, i:7
I am threadproc1, tid:4152293120, i:8
I am threadproc2, tid:4143900416, i:8
I am threadproc1, tid:4152293120, i:9
I am threadproc2, tid:4143900416, i:9
I am threadproc1, tid:4152293120, i:10
I am threadproc2, tid:4143900416, i:10
I am threadproc1, tid:4152293120, i:11
I am threadproc2, tid:4143900416, i:11
I am threadproc1, tid:4152293120, i:12
I am threadproc2, tid:4143900416, i:12
I am threadproc1, tid:4152293120, i:13
I am threadproc2, tid:4143900416, i:13
I am threadproc1, tid:4152293120, i:14
I am threadproc2, tid:4143900416, i:14
I am threadproc1, tid:4152293120, i:15
I am threadproc2, tid:4143900416, i:15
I am threadproc1, tid:4152293120, i:16
I am threadproc2, tid:4143900416, i:16
I am threadproc1, tid:4152293120, i:17
I am threadproc2, tid:4143900416, i:17
I am threadproc1, tid:4152293120, i:18
I am threadproc2, tid:4143900416, i:18
I am threadproc1, tid:4152293120, i:19
I am threadproc2, tid:4143900416, i:19
thread1 joined
thread2 joined
*** Error in `/home/yconiontest/test/gdb_test/testfrist': munmap_chunk(): invalid pointer: 0x00007fffffffe73f ***
[Thread 0x7ffff6fee700 (LWP 7141) exited]
[Thread 0x7ffff77ef700 (LWP 7140) exited]
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7ffff78677e5]
/lib/x86_64-linux-gnu/libc.so.6(cfree+0x1a8)[0x7ffff7874698]
/home/yconiontest/test/gdb_test/testfrist[0x400997]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7ffff7810830]
/home/yconiontest/test/gdb_test/testfrist[0x400759]
======= Memory map: ========
00400000-00401000 r-xp 00000000 fd:01 2240130                            /home/yconiontest/test/gdb_test/testfrist
00600000-00601000 r--p 00000000 fd:01 2240130                            /home/yconiontest/test/gdb_test/testfrist
00601000-00602000 rw-p 00001000 fd:01 2240130                            /home/yconiontest/test/gdb_test/testfrist
00602000-00623000 rw-p 00000000 00:00 0                                  [heap]
7ffff65d8000-7ffff65ee000 r-xp 00000000 fd:01 393743                     /lib/x86_64-linux-gnu/libgcc_s.so.1
7ffff65ee000-7ffff67ed000 ---p 00016000 fd:01 393743                     /lib/x86_64-linux-gnu/libgcc_s.so.1
7ffff67ed000-7ffff67ee000 rw-p 00015000 fd:01 393743                     /lib/x86_64-linux-gnu/libgcc_s.so.1
7ffff67ee000-7ffff67ef000 ---p 00000000 00:00 0 
7ffff67ef000-7ffff6fef000 rw-p 00000000 00:00 0 
7ffff6fef000-7ffff6ff0000 ---p 00000000 00:00 0 
7ffff6ff0000-7ffff77f0000 rw-p 00000000 00:00 0 
7ffff77f0000-7ffff79b0000 r-xp 00000000 fd:01 400552                     /lib/x86_64-linux-gnu/libc-2.23.so
7ffff79b0000-7ffff7bb0000 ---p 001c0000 fd:01 400552                     /lib/x86_64-linux-gnu/libc-2.23.so
7ffff7bb0000-7ffff7bb4000 r--p 001c0000 fd:01 400552                     /lib/x86_64-linux-gnu/libc-2.23.so
7ffff7bb4000-7ffff7bb6000 rw-p 001c4000 fd:01 400552                     /lib/x86_64-linux-gnu/libc-2.23.so
7ffff7bb6000-7ffff7bba000 rw-p 00000000 00:00 0 
7ffff7bba000-7ffff7bd2000 r-xp 00000000 fd:01 400539                     /lib/x86_64-linux-gnu/libpthread-2.23.so
7ffff7bd2000-7ffff7dd1000 ---p 00018000 fd:01 400539                     /lib/x86_64-linux-gnu/libpthread-2.23.so
7ffff7dd1000-7ffff7dd2000 r--p 00017000 fd:01 400539                     /lib/x86_64-linux-gnu/libpthread-2.23.so
7ffff7dd2000-7ffff7dd3000 rw-p 00018000 fd:01 400539                     /lib/x86_64-linux-gnu/libpthread-2.23.so
7ffff7dd3000-7ffff7dd7000 rw-p 00000000 00:00 0 
7ffff7dd7000-7ffff7dfd000 r-xp 00000000 fd:01 400538                     /lib/x86_64-linux-gnu/ld-2.23.so
7ffff7fea000-7ffff7fee000 rw-p 00000000 00:00 0 
7ffff7ff6000-7ffff7ff7000 rw-p 00000000 00:00 0 
7ffff7ff7000-7ffff7ffa000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00025000 fd:01 400538                     /lib/x86_64-linux-gnu/ld-2.23.so
7ffff7ffd000-7ffff7ffe000 rw-p 00026000 fd:01 400538                     /lib/x86_64-linux-gnu/ld-2.23.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]

Thread 1 "testfrist" received signal SIGABRT, Aborted.
0x00007ffff7825428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54
54  ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) Quit
(gdb) Quit
(gdb) 
Continuing.

Program terminated with signal SIGABRT, Aborted.
The program no longer exists.
(gdb) quit
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ ./testfrist 
Segmentation fault (core dumped)
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ gdb testfrist core-testfrist.*.ubuntu.*GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
&lt;http://www.gnu.org/software/gdb/documentation/&gt;.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from testfrist...done.
/home/yconiontest/test/gdb_test/core-testfrist.*.ubuntu.*: No such file or directory.
(gdb) bt
No stack.
(gdb) quit
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ ./testfrist 
Segmentation fault (core dumped)
yconiontest@ecs-sn3-medium-2-linux-20191126141508:~/test/gdb_test$ ls

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 18:56:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 10:56:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdb%e8%b0%83%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linuxlite"><![CDATA[linux内核]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>智能指针</title>
		<link>http://114.116.235.65/2020/01/03/421/%e6%99%ba%e8%83%bd%e6%8c%87%e9%92%88.html</link>
		<pubDate>Fri, 03 Jan 2020 09:10:26 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>概念</h2>

<blockquote>
  我们知道除了静态内存和栈内存外，每个程序还有一个内存池，这部分内存被称为自由空间或者堆。程序用堆来存储动态分配的对象即那些在程序运行时分配的对象，当动态对象不再使用时，我们的代码必须显式的销毁它们。
  
  在C++中，动态内存的管理是用一对运算符完成的：new和delete，new:在动态内存中为对象分配一块空间并返回一个指向该对象的指针，delete：指向一个动态独享的指针，销毁对象，并释放与之关联的内存。
</blockquote>

<pre><code class="language-cpp ">    int* value1 = new int;
    std::string* str1 = new std::string{"hello"};
    int* arr1 = new int[10];
</code></pre>

<pre><code class="language-cpp ">    delete value1;
    delete str1;
    delete[] arr1;
</code></pre>

<blockquote>
  动态内存管理经常会出现两种问题：一种是忘记释放内存，会造成内存泄漏；一种是尚有指针引用内存的情况下就释放了它，就会产生引用非法内存的指针。
  
  为了更加容易（更加安全）的使用动态内存，引入了智能指针的概念。智能指针的行为类似常规指针，重要的区别是它负责自动释放所指向的对象。标准库提供的两种智能指针的区别在于管理底层指针的方法不同，shared_ptr允许多个指针指向同一个对象，unique_ptr则“独占”所指向的对象。标准库还定义了一种名为weak_ptr的伴随类，它是一种弱引用，指向shared_ptr所管理的对象，这三种智能指针都定义在memory头文件中。
</blockquote>

<h2><code>#include &lt;memory&gt;</code></h2>

<h2>unique_ptr</h2>

一个unique_ptr"拥有“他所指向的对象。与shared_ptr不同，某个时刻只能有一个unique_ptr指向一个给定的对象，不支持拷贝和赋值。当unique_ptr被销毁时，它所指向的对象也被销毁。uniptr_ptr表达的是一种独占的思想。

<h3>unique_ptr应用</h3>

<pre><code class="language-cpp ">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;
#include &lt;map&gt;


void test()
{
    std::unique_ptr&lt;int&gt; up1(new int(11));   // 无法复制的unique_ptr
    // unique_ptr&lt;int&gt; up2 = up1;        // err, 不能通过编译
    std::cout &lt;&lt; *up1 &lt;&lt; std::endl;   // 11

    std::unique_ptr&lt;int&gt; up3 = std::move(up1);    // 现在p3是数据的唯一的unique_ptr

    std::cout &lt;&lt; *up3 &lt;&lt; std::endl;   // 11
    // std::cout &lt;&lt; *up1 &lt;&lt; std::endl;   // err, 运行时错误，空指针
    up3.reset();            // 显式释放内存
    up1.reset();            // 不会导致运行时错误
    // std::cout &lt;&lt; *up3 &lt;&lt; std::endl;   // err, 运行时错误，空指针

    std::unique_ptr&lt;int&gt; up4(new int(22));   // 无法复制的unique_ptr
    up4.reset(new int(44));  // "绑定"动态对象
    std::cout &lt;&lt; *up4 &lt;&lt; std::endl; // 44

    up4 = nullptr; // 显式销毁所指对象，同时智能指针变为空指针。与up4.reset()等价

    std::unique_ptr&lt;int&gt; up5(new int(55));
    int *p = up5.release(); // 只是释放控制权，不会释放内存
    std::cout &lt;&lt; *p &lt;&lt; std::endl;
    // cout &lt;&lt; *up5 &lt;&lt; endl; // err, 运行时错误，不再拥有内存
    delete p; // 释放堆区资源

    return;
}

</code></pre>

<strong>基本操作：</strong>

<a href="http://114.116.235.65/wp-content/uploads/2020/01/1228216-20180728200542682-131026381.png"><img src="http://114.116.235.65/wp-content/uploads/2020/01/1228216-20180728200542682-131026381.png" alt="" /></a>

<h2>shared_ptr</h2>

<blockquote>
  shared_ptr采用了引用计数器，多个shared_ptr中的T *ptr指向同一个内存区域（同一个对象），并共同维护同一个引用计数器。shared_ptr定义如下,记录同一个实例被引用的次数，当引用次数大于0时可用，等于0时释放内存。
     一旦最后一个这样的指针被销毁，也就是一旦某个对象的引用计数变为0，这个对象会被自动删除。这在非环形数据结构中防止资源泄露很有帮助。
</blockquote>

<pre><code class="language-cpp ">temple&lt;typename T&gt;
class SharedPtr {
public:
   ... 
private:
    T *_ptr;
    int *_refCount;     //should be int*, rather than int
};

</code></pre>

它的构造函数是explicit的，内置指针不能隐式的转换为智能指针，只能使用初始化的形式。

<pre><code class="language-cpp ">shared_ptr&lt;int&gt; p1 = new int(11);   //错误，必须使用直接初始化形式
shared_ptr&lt;int&gt; p2( new int(11) );   //正确，使用直接初始化
shared_ptr&lt;int&gt; p3 = shared_ptr&lt;int&gt;( new int(12) ); //同上

</code></pre>

不要混合使用普通指针和智能指针

<pre><code class="language-cpp ">void process( shared_ptr&lt;int&gt; ptr )
   {

   } //离开，ptr被销毁

    //显式的，正确的
    shared_ptr&lt;int&gt; p(new int(42));
    process(p);
    int i =*p;

    //临时的shared_ptr，错误的
    int *x( new int(1024) );
    process(x); //错误，不能转化
    process( shared_ptr&lt;int&gt;(x) );  //x在这里被释放掉
    int j = *x;  //错误，这里是一个空悬指针

</code></pre>

不要使用get来初始化另一个智能指针或为智能指针赋值

<h2>weak_ptr</h2>

weak_ptr是为配合shared_ptr而引入的一种智能指针来协助shared_ptr工作，它可以从一个shared_ptr或另一个weak_ptr对象构造，它的构造和析构不会引起引用计数的增加或减少。没有重载 *和 -> 但可以使用lock获得一个可用的shared_ptr对象

weak_ptr的使用更为复杂一点，它可以指向shared_ptr指针指向的对象内存，却并不拥有该内存，而使用weak_ptr成员lock，则可返回其指向内存的一个share_ptr对象，且在所指对象内存已经无效时，返回指针空值nullptr。

<strong>注意：weak_ptr并不拥有资源的所有权，所以不能直接使用资源。 可以从一个weak_ptr构造一个shared_ptr以取得共享资源的所有权</strong>。

<pre><code class="language-cpp ">void check(std::weak_ptr&lt;int&gt; &amp;wp) {
    std::shared_ptr&lt;int&gt; sp = wp.lock();  // 转换为shared_ptr&lt;int&gt;
    if (sp != nullptr) {
      std::cout &lt;&lt; "still: " &lt;&lt; *sp &lt;&lt; std::endl;
    } else {
      std::cout &lt;&lt; "still: " &lt;&lt; "pointer is invalid" &lt;&lt; std::endl;
    }
}

</code></pre>

weak_ptr是一种不控制所指向对象生存期的智能指针，它指向一个由shared_ptr管理的对象，将一个weak_ptr绑定到一个shared_ptr不会改变shared_ptr的引用计数。一旦最后一个指向对象的shared_ptr被销毁，对象就会被释放，即使有weak_ptr指向对象，对象还是会被释放。
由于对象可能不存在，我们不能使用weak_ptr直接访问对象，而必须调用lock，此函数检查weak_ptr指向的对象是否存在。如果存在，lock返回一个指向共享对象的shared_ptr,如果不存在，lock将返回一个空指针。

<h2>文章</h2>

<a href="https://blog.csdn.net/king_way/article/details/95536938" title="C++11智能指针（unique_ptr、shared_ptr、weak_ptr)">C++11智能指针（unique_ptr、shared_ptr、weak_ptr)</a>
<a href="https://blog.csdn.net/flowing_wind/article/details/81301001" title="【C++】智能指针详解">[C++]智能指针详解</a>
<a href="https://www.jianshu.com/p/0974e54fb42e" title="C++new和delete">C++new和delete</a>
<a href="https://blog.csdn.net/Damn_Yang/article/details/86494285" title="C++智能指针auto_ptr、unique_ptr、shared_ptr的实现及原理。">C++智能指针auto_ptr、unique_ptr、shared_ptr的实现及原理。</a>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2020-01-03 17:10:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-03 09:10:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%99%ba%e8%83%bd%e6%8c%87%e9%92%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="cppbase"><![CDATA[c++基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[422]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>多态与继承</title>
		<link>http://114.116.235.65/2019/11/04/425/%e5%a4%9a%e6%80%81%e4%b8%8e%e7%bb%a7%e6%89%bf.html</link>
		<pubDate>Mon, 04 Nov 2019 11:20:48 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>多态的学习</h2>

<h3>什么是多态</h3>

<blockquote>
  多态是指同样的消息被不同类型的对象接受时导致不同的行为。所谓消息是指对类的成员函数的调用，不同的行为是指不同的实现，也就调用不同的函数。换言之，多态指的就是用同样的接口访问功能不同的函数，从而实现“一个接口，多种方法”。
</blockquote>

<h2>多态分类</h2>

多态可以分为：<strong>：重载多态、强制多态、参数多态和包含多态</strong>。
- 重载多态、强制多态可以划为专用多态，参数多态、包含多态统称为通用多态。
- 从多态实现的阶段不同来分类可以分为编译时的多态和运行时的多态。
- 如果绑定过程发生在编译链接阶段，则称为静态绑定。

<blockquote>
  在编译链接过程中，编译器根据类型匹配等特征确定某个同名标识究竟调用哪一段程序代码，也就是确定通过某个同名函数到底调用哪个函数体。1中的四种多态中有三种需要静态绑定：重载多态、强制多态和参数多态。
  - 而如果绑定过程发生在程序运行阶段，则成为动态绑定
  在编译链接过程中无法确定调用的具体函数，就要等到程序运行时动态确定。包含多态就需要使用动态绑定实现。
</blockquote>

<h3>实现方式</h3>

<strong>实现多态有三种方式：虚方法，抽象方法，接口。</strong>
1. 虚方法：子类重写父类中的方法，对父类中的方法进行覆盖。适用情况：父类中的方法对子类来说不适用，子类通过重写该方法，覆盖了父类中的方法。
2. 抽象方法：子类重写父类中的方法，父类中不对方法进行实现，在子类中进行实现，父类是抽象类。适用情况：针对同一种类型抽象出来的父类，对某些行为和属性大家都是公有的，但是这些属性和行为实现方式并不一致。
3. 接口：实现接口的类，将接口中的方法实现。适用情况：A.当多个类型不能抽象出合理的父类时，但是又要对某些行为进行多态，将公共的方法抽象到一个接口中，让不同的子类调用。

<pre><code class="language-cpp ">//编写一个哺乳动物类Mammal，再由此派生出狗类Dog,Cat类，三者都声明speak()成员函数，该函数在基类中被声明为虚函数。

#include &lt;iostream&gt;
#include&lt;string &gt;
using namespace std;
class Mammal {
public:
    virtual void speak();
private:
    string name;
};
class Dog :public Mammal{
public:
     virtual void speak();
private:
    int age;

}; 
class Cat :public Mammal {
public:
    virtual void speak();
private:
    int age;

};
void fun(Mammal *m) {//通过传入不同对象的实参，可调用产生对应的成员函数，以实现多态的功能
    m-&gt;speak();
}
void Mammal::speak() { cout &lt;&lt; "I don't know what to speak" &lt;&lt; endl; };
void Dog::speak() { cout &lt;&lt; "wang ~~~wang~~~ wang~~~" &lt;&lt; endl; };
void Cat::speak() { cout &lt;&lt; "miao ~~~miao~~~ miao~~~" &lt;&lt; endl; };
int main()
{
    Dog d;
    Cat c;
    //传入不同对象的参数，实现相对应的功能（多态）
    fun(&amp;d);
    fun(&amp;c);

    return 0;
}
</code></pre>

<h4>虚函数</h4>

<ul>
<li>虚函数：虚函数就是在类的成员函数前面加virtual关键字。</p></li>
<li><p>虚函数重写：虚函数的重写：派生类中有一个跟基类的完全相同虚函数，我们就称子类的虚函数重写了基类的虚函数。</p></li>
</ul>

<p>完全相同是指：函数名、参数、返回值都相同。另外虚函数的重写也叫作虚函数的覆盖

<strong>虚函数重写有一个例外错误：协变</strong>

重写的虚函数的返回值可以不同，但是必须分别是基类指针或引用和派生类指针或引用。

这种情况在VS会报错，但是在linux的G++下不会

<strong>ps:一种不规范的写法就是在父类里有virtual关键字而继承子类没加，虽然表达结果一样</strong>

<h4>虚函数的底层实现机制</h4>

<strong>实现原理：虚函数表+虚表指针</strong>

<strong>关键字：虚函数底层实现机制；虚函数表；虚表指针</strong>

<blockquote>
  编译器处理虚函数的方法是：为每个类对象添加一个隐藏成员，隐藏成员中保存了一个指向函数地址数组的指针，称为虚表指针（vptr），这种数组成为虚函数表（virtual function table, vtbl），即，每个类使用一个虚函数表，每个类对象用一个虚表指针。
</blockquote>

举个例子：基类对象包含一个虚表指针，指向基类中所有虚函数的地址表。派生类对象也将包含一个虚表指针，指向派生类虚函数表。看下面两种情况：

<blockquote>
  如果派生类重写了基类的虚方法，该派生类虚函数表将保存重写的虚函数的地址，而不是基类的虚函数地址。
  
  如果基类中的虚方法没有在派生类中重写，那么派生类将继承基类中的虚方法，而且派生类中虚函数表将保存基类中未被重写的虚函数的地址。注意，如果派生类中定义了新的虚方法，则该虚函数的地址也将被添加到派生类虚函数表中。
</blockquote>

<h3>C++11 override 和 final</h3>

<strong>override:</strong>

<ul>
<li>override是用来检查函数是否重写，是在virtual void fun() override {}这里加上，然后来检查的。实际中，建议这样写。</li>
</ul>

<strong>final:</strong>

<ul>
<li>final是在class A final {};这里加上，目的是为了不让这个类被继承。
或者，在一个函数后加，表示这个函数不能被重写。<code>void fun() final {}。</code></li>
</ul>

<h2>C++ 对象的内存布局</h2>

<a href="https://coolshell.cn/articles/12176.html">https://coolshell.cn/articles/12176.html</a>

<h4>那些函数不能定义为虚函数？</h4>

经检验下面的几个函数都不能定义为虚函数：
1）友元函数，它不是类的成员函数
2）全局函数
3）静态成员函数，它没有this指针
3）构造函数，拷贝构造函数，以及赋值运算符重载（可以但是一般不建议作为虚函数）

<h3>文章</h3>

<a href="https://www.cnblogs.com/zkfopen/p/11061414.html" title="C++中虚函数的作用和虚函数的工作原理">C++中虚函数的作用和虚函数的工作原理</a>
<a href="http://www.jizhuomi.com/school/c/142.html" title="C++编程入门系列之四十五（多态性：运算符重载的概念和规则）">C++编程入门系列之四十五（多态性：运算符重载的概念和规则）</a>
<a href="https://blog.csdn.net/gaoshangdemao/article/details/100191259" title="C++零碎问题：多态的定义、好处及分类">C++零碎问题：多态的定义、好处及分类</a>
<a href="https://blog.csdn.net/weibo1230123/article/details/81978299" title="多态定义、多态实现、多态分类。">多态定义、多态实现、多态分类。</a>
<a href="https://blog.csdn.net/weixin_42678507/article/details/89414998" title="C++ 多态的定义及实现">C++ 多态的定义及实现</a><a href="https://blog.csdn.net/qq_39412582/article/details/81628254" title="C++ 之 多态（非常非常重要，重点在后面）">C++ 之 多态（非常非常重要，重点在后面）</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2019-11-04 19:20:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-04 11:20:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%9a%e6%80%81%e4%b8%8e%e7%bb%a7%e6%89%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="cppbase"><![CDATA[c++基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-11-04]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>TCP粘包问题</title>
		<link>http://114.116.235.65/2019/11/05/428/tcp%e7%b2%98%e5%8c%85%e9%97%ae%e9%a2%98.html</link>
		<pubDate>Tue, 05 Nov 2019 08:57:40 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=428</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>什么是粘包</h3>

假设客户端分别发送了两个数据包D1和D2给服务端，由于服务端一次读取到的字节数是不确定的，故可能存在以下4种情况。
1. 服务端分两次读取到了两个独立的数据包，分别是D1和D2，没有粘包和拆包；
2. 服务端一次接收到了两个数据包，D1和D2粘合在一起，被称为TCP粘包；
3. 服务端分两次读取到了两个数据包，第一次读取到了完整的D1包和D2包的部分内容，第二次读取到了D2包的剩余内容，这被称为TCP拆包；
4. 服务端分两次读取到了两个数据包，第一次读取到了D1包的部分内容D1_1，第二次读取到了D1包的剩余内容D1_2和D2包的整包。
5. 如果此时服务端TCP接收滑窗非常小，而数据包D1和D2比较大，很有可能会发生第五种可能，即服务端分多次才能将D1和D2包接收完全，期间发生多次拆包。

<strong>所谓粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的。TCP内部nagle算法,优化传输效率:数据量小且间隔时间小的数据会合并为一次进行发送</strong>

<h3>产生的原因</h3>

发生TCP粘包或拆包有很多原因,常有以下几种：

<ol>
<li>要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p></li>
<li><p>待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p></li>
<li><p>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p></li>
<li><p>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。
等等。</p></li>
</ol>

<blockquote>
  <p>由于TCP协议本身的机制（面向连接的可靠地协议-三次握手机制）客户端与服务器会维持一个连接（Channel），数据在连接不断开的情况下，可以持续不断地将多个数据包发往服务器，但是如果发送的网络数据包太小，那么他本身会启用Nagle算法（可配置是否启用）对较小的数据包进行合并（基于此，TCP的网络延迟要UDP的高些）然后再发送（超时或者包大小足够）。那么这样的话，服务器在接收到消息（数据流）的时候就无法区分哪些数据包是客户端自己分开发送的，这样产生了粘包；服务器在接收到数据库后，放到缓冲区中，如果消息没有被及时从缓存区取走，下次在取数据的时候可能就会出现一次取出多个数据包的情况，造成粘包现象。
  
  UDP：本身作为无连接的不可靠的传输协议（适合频繁发送较小的数据包），他不会对数据包进行合并发送（也就没有Nagle算法之说了），他直接是一端发送什么数据，直接就发出去了，既然他不会对数据合并，每一个数据包都是完整的（数据+UDP头+IP头等等发一次数据封装一次）也就没有粘包一说了。
  分包产生的原因就简单的多：可能是IP分片传输导致的，也可能是传输过程中丢失部分包导致出现的半包，还有可能就是一个包可能被分成了两次传输，在取数据的时候，先取到了一部分（还可能与接收的缓冲区大小有关系），总之就是一个数据包被分成了多次接收。
</blockquote>

<pre><code class="">1. Nagle算法：

是为了减少广域网的小分组数目，从而减小网络拥塞的出现；

该算法要求一个tcp连接上最多只能有一个未被确认的未完成的小分组，在该分组ack到达之前不能发送其他的小分组，tcp需要收集这些少量的分组，并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组；

该算法的优越之处在于它是自适应的，确认到达的越快，数据也就发哦送的越快；而在希望减少微小分组数目的低速广域网上，则会发送更少的分组；
</code></pre>

<pre><code class="">2. 延迟ACK：

如果tcp对每个数据包都发送一个ack确认，那么只是一个单独的数据包为了发送一个ack代价比较高，所以tcp会延迟一段时间，如果这段时间内有数据发送到对端，则捎带发送ack，如果在延迟ack定时器触发时候，发现ack尚未发送，则立即单独发送；
延迟ACK好处：

(1) 避免糊涂窗口综合症；

(2) 发送数据的时候将ack捎带发送，不必单独发送ack；

(3) 如果延迟时间内有多个数据段到达，那么允许协议栈发送一个ack确认多个报文段；
</code></pre>

<h3>解决办法</h3>

<strong>无论拆包还是粘包本质问题都是无法区分包界限</strong>

通过以上分析，我们清楚了粘包或拆包发生的原因，那么如何解决这个问题呢？解决问题的关键在于如何给每个数据包添加边界信息，常用的方法有如下几个：

1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。

2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。

3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。

等等。

<h3>文章</h3>

<a href="https://www.cnblogs.com/ellisonzhang/p/10406926.html" title="粘包问题详解">粘包问题详解</a>
<a href="https://blog.csdn.net/qq_28822933/article/details/83713560" title="粘包和半包问题总结">粘包和半包问题总结</a>
<a href="https://blog.csdn.net/fgx_123456/article/details/80031821" title="TCP粘包拆包的产生原因分析及解决思路">TCP粘包拆包的产生原因分析及解决思路</a>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date><![CDATA[2019-11-05 16:57:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-05 08:57:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tcp%e7%b2%98%e5%8c%85%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b"><![CDATA[网络编程]]></category>
		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c"><![CDATA[计算机网络]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-01-05]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>git基本命令</title>
		<link>http://114.116.235.65/2019/11/08/431/git%e5%9f%ba%e6%9c%ac%e5%91%bd%e4%bb%a4.html</link>
		<pubDate>Fri, 08 Nov 2019 04:54:14 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[（转）<a href="https://blog.csdn.net/qq_36150631/article/details/81038485" title="https://blog.csdn.net/qq_36150631/article/details/81038485">https://blog.csdn.net/qq_36150631/article/details/81038485</a>

<h3>一、新建代码库</h3>

<pre><code class="language-shell "># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre>

<h3>二、配置</h3>

<pre><code class="language-shell "><br /># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
</code></pre>

<h3>三、增加/删除文件</h3>

<pre><code class="language-shell "><br /># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>

<h3>四、代码提交</h3>

<pre><code class="language-shell "># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>

<h3>五、分支</h3>

<pre><code class="language-shell "># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre>

<h3>六、标签</h3>

<pre><code class="language-shell "># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre>

<h3>七、查看信息</h3>

<pre><code class="language-shell "># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre>

<h3>八、远程同步</h3>

<pre><code class="language-shell "># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>

<h3>九、撤销</h3>

<pre><code class="language-shell "># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2019-11-08 12:54:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-08 04:54:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e5%9f%ba%e6%9c%ac%e5%91%bd%e4%bb%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="git"><![CDATA[git]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-01-08]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>冒泡排序原理</title>
		<link>http://114.116.235.65/2020/01/08/439/%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Wed, 08 Jan 2020 12:49:42 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=439</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>冒泡排序</h3>

<strong>在冒泡排序中，核心思想就是逐次比较，在比较的过程中保留较大值（或较小值），然后将该值保留移动至最左边（或最右边）---模拟水泡因为重量太轻（其实是压强）的缘故一直往上漂的过程</strong>

<ul>
<li>从过程中发现它的复杂度为O(n2)，n个数n次循环（准确来讲应从实际的数学来判断）</li>
<li><p>冒上去的“水泡”不需要在考虑了</p></li>
<li><p>具体一类算法如下 <a href="https://blog.csdn.net/yangchuang93/article/details/80858054" title="https://blog.csdn.net/yangchuang93/article/details/80858054">https://blog.csdn.net/yangchuang93/article/details/80858054</a></p></li>
</ul>

<pre><code class="language-cpp ">#include&lt;iostream&gt;
using namespace std;

void print(int arr[], int n)
{  
    for(int j= 0; j&lt;n; j++)
    {  
           cout&lt;&lt;arr[j] &lt;&lt;"  ";  
        }  
    cout&lt;&lt;endl;  
}  

void BubbleSort(int arr[], int n)
{
    for (int i = 0; i &lt; n - 1; i++)
    {
            for (int j = 0; j &lt; n - i - 1; j++)
            {
                    if (arr[j] &gt; arr[j + 1]) 
            {
                            int temp = arr[j];
                            arr[j] = arr[j + 1];
                            arr[j + 1] = temp;
                        }
                 }
         }
}

int main()
{  
    int s[10] = {8,1,9,7,2,4,5,6,10,3};  
    cout&lt;&lt;"初始序列：";  
    print(s,10);  
    BubbleSort(s,10);  
    cout&lt;&lt;"排序结果：";  
    print(s,10);  
    system("pause"); 
} 

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 20:49:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 12:49:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f"><![CDATA[冒泡排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>快速排序原理</title>
		<link>http://114.116.235.65/2020/01/08/441/%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Wed, 08 Jan 2020 14:29:00 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>快速排序</h3>

<strong>在<a href="https://blog.csdn.net/morewindows/article/details/6684558" title="https://blog.csdn.net/morewindows/article/details/6684558">https://blog.csdn.net/morewindows/article/details/6684558</a>中提到一个挖坑填坑的方法感觉很形象也通俗易懂</strong>

对于快速排序，核心思想在于分治法---通过一个手段将问题分为两个更小的同类型问题（所以可以考虑用递归解），然后不断化小。

<ul>
<li>取一个基准值，比如第一项，然后选两个指针（概念上的）分别表示开头和结尾，目的是这两个指针中间包围的为未判断的待处理数据，两边为存放（或者表示）以判断结果值，比如左边为大值，右边为小值。</li>
</ul>

<table>
<thead>
<tr>
  <th align="center">0</th>
  <th align="center">1</th>
  <th align="center">2</th>
  <th align="center">3</th>
  <th align="center">4</th>
  <th align="center">5</th>
  <th align="center">6</th>
  <th align="center">7</th>
  <th align="center">8</th>
  <th align="center">9</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center">73</td>
  <td align="center">25</td>
  <td align="center">4</td>
  <td align="center">86</td>
  <td align="center">45</td>
  <td align="center">35</td>
  <td align="center">38</td>
  <td align="center">98</td>
  <td align="center">52</td>
  <td align="center">61</td>
</tr>
</tbody>
</table>

<ul>
<li>上面取基准值的过程就可以看成是挖坑的过程，先从后面未比较值来与坑比较，合适（比如要求逆序则自然是大的留下填坑）而此时，老坑被填新坑又出现所以在从前面老坑的地方往后依次判断是否符合后面的坑的大小。</li>
<li>如此这般直至两个指针值所包围的未处理数为0，（即i>=j）.</li>
<li>这样就分为两个数组，前面为大值i，后面为小值，每个数组重复上述步骤。</li>
</ul>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:29:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 14:29:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%bf%ab%e9%80%9f%e6%8e%92%e5%ba%8f"><![CDATA[快速排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Post Rewards Alipay</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=455</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=455</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-post_rewards_alipay]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Post Rewards Wechat</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=456</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=456</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-post_rewards_wechat]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Wechat Qr</title>
		<link>http://114.116.235.65/?post_type=opshui&#038;p=457</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?post_type=opshui&#038;p=457</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 22:57:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hui-wechat_qr]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[opshui]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>协程库coroutine</title>
		<link>http://114.116.235.65/?p=472</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=472</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>472</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 10:34:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>linux常用命令</title>
		<link>http://114.116.235.65/2019/12/14/506/linux%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4.html</link>
		<pubDate>Sat, 14 Dec 2019 11:40:00 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>linux常用命令</h3>

该<a href="http://https://blog.csdn.net/weixin_44706512/article/details/90604635" title="https://blog.csdn.net/weixin_44706512/article/details/90604635">https://blog.csdn.net/weixin_44706512/article/details/90604635</a>博客里常用基础的命令都写得比较全了，这里摘抄一下便于复习。

<hr />

<h4>查看目录结构命令</h4>

ls(list)功能：列出目录内容

格式：ls[参数][文件或目录]

-a或--all    所有文件和目录。注意隐藏文件、特殊目录、以“.”开头的和以“..”开头的

-l    使用详细格式列表

-t    用文件和目录的更改时间排序

-r   反向排序

--help   在线帮助

常用：

ls   -l             列出当前目录下的文件信息（此命令很常用，简化的格式为 ll）

ls   -al           列出当前目录下的文件信息（包括隐藏文件，特殊目录）

ll    /home/     显示根目录下home目录下的内容

<h4>切换目录命令</h4>

cd(change directory)功能：切换目录

语法：cd[目录]

常用：

cd   ~       当前用户主目录

cd   /        根目录

cd   -        上一次访问的目录

cd   ..       上一级目录

cd            当前用户主目录

 

touch   1.txt    在当前目录创建一个文件1.txt

clear：清除屏幕

<h4>创建目录命令</h4>

pwd:显示当前工作目录

mkdir: 创建目录

mkdir   a :当前目录下创建文件夹a

mkdir  /root/b  :在根目录下的root下创建目录b

mkdir  -pv  /root/c/e/d :在根目录下的root下创建目录结构c/e/d（一下创建多级目录）

-p：父目录不存在情况下先生成父目录

-v：显示命令执行过程中的详细信息

[注]：如果是文件开头是-，如果是文件夹开头是d且文件夹名为黑体(如下图所示)
<img src="http://114.116.235.65/wp-content/uploads/2020/01/2019052717355946.png" alt="" />

<h4>文件浏览</h4>

[注]：按tab键可以自动补齐文件名

cat   文件名：显示指定文件的所有内容（用于文件内容少的情况）

more  文件名：分页显示文件内容，还支持直接跳转行等功能（用于文件内容多的情况）

Enter ：向下n行，需要定义。默认为1行

空格键：向下滚动一屏  或 Ctrl+F

B    返回上一屏  或Ctrl+B

q   退出more

less [参数]  文件名 ：分页显示文件内容，操作更详细

参数：-m 显示类似more命令的百分比        -N   显示每行的行号     两个参数可以结合用  -mN

空格键：前进一页 或 page down

b：后退一页   或 page up

d：前进半页

u：后退半页

Enter：前进一行 或 方向键向下

y：后退一行  或 方向键向上

/字符串：向下搜索

？字符串：向上搜索

v：进入vim编辑器

tall命令：用来显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。

tail[必要参数][选择参数][文件]

 -n&lt;行数> 显示行数

-f 循环读取

<h4>文件操作</h4>

1.复制命令：cp

cp(copy)功能：复制文件或目录

语法：cp[参数]   [源文件或目录]    [目标文件或目录]

-r或--recursive   递归处理，将指定目录下的文件与子目录一并处理

 -b  覆盖文件时，可以将源文件做一个备份

例如：

复制文件：

cp   1.txt   2.txt

cp -b  1.txt  2.txt  ：如果覆盖文件时,可以将源文件做一个备份

cp  ./1.txt   ../   ：将当前目录下的1.txt复制到父级目录

cp  /root/1.txt   /bin/2.txt   ：将/root下的1.txt文件复制到根目录下的bin目录下的2.txt中

复制目录：(无论是单层目录还是多层目录都可以复制):

cp  -r  ./a  ./b

cp  -r  /root/a  /root/z

2.移动命令：mv

mv（move）功能：移动或更名现有的文件或目录

语法：mv [源文件或目录][目标文件或目录]

-f  或 --force   若目标文件或目录与现有的文件目录重复，则直接覆盖现有的文件或目录

剪切文件：mv    ./1.txt    /root    将当前目录下的1.txt文件 剪切到root目录下

重命名文件：mv  ./1.txt   ./2.txt      将当前目录下的1.txt文件重命名为2.txt

3.删除命令：rm

rm功能：删除文件或目录

语法：rm [-dfirv][--help][--version][文件或目录...]

-f 或 --force   强制删除文件或目录

-r 或 -R 或 --recursive   递归处理，将指定目录下的所有文件及子目录一并处理

强制删除文件：rm   -f   ./1.txt      

强制删除目录：rm   -rf   ./a      

 

4.查找命令：find

find功能：查找文件或目录

语法：find[目录...][参数]

-name  指定字符串作为寻找文件或目录的范本样式

例如：find  /root/  -name  'test<em>'   查找root目录下的文件开头是test的文件和文件夹，</em>是通配符 。注意字符串要用单引号引起来。
 ##### Linux 权限格式：&lt;类型>&lt;用户>&lt;组>&lt;其他用户>

<h4>文档编辑</h4>

vi或vim命令

基本操作

<ol>
<li>vim  文件名   ：进入一般模式（不能输入）</p></li>
<li><p>按下 i 从一般模式，进入到插入模式</p></li>
<li><p>按下esc从插入模式，退出到一般模式</p></li>
<li><p>在一般模式下，输入:wq,退出编辑。</p></li>
</ol>

<h4>管道</h4>

<p>linux提供管道符号 “|”  作用是“命令1”的输出内容，将作为“命令2”的输入内容。一般与grep命令一起使用

格式：命令1 | 命令2

1.grep命令

功能：用于过滤/搜索特定字符。可使用正则表达式 能多种命令配合使用。

格式：grep [option] pattern [file]       grep   参数  过滤条件   文件        （-i 或 --ignore-case        忽略字符大小写的差别）

例如：grep   -i   one  /root/1.txt      显示root目录下的1.txt文件中含有one字符的一行数据（忽略大小写）   

格式：其他命令 | grep  参数  过滤条件

例如：cat   /root/1.txt  |  grep  -i  one     在cat命令输出结果基础上，进行过滤

<h4>系统命令</h4>

1.ps命令

任务管理器：ps  -ef        查看当前所有进程（包括执行ps命令的那个时刻进程信息）

格式：ps [参数]

-e  此参数的效果和指定“A”参数相同，显示所有程序

-f  显示UID,PPIP,C与STIME栏位

例如：ps -ef  |  grep -i mysql     过滤出mysql这个进程

2.kill命令

kill功能：删除执行中的程序或工作

语法：kill[参数][程序]

-l&lt;信息编号>       若不加&lt;信息编号>选项，则-l参数会列出全部的信息名称。

kill  -9  ：表示强制终止

格式：kill    -9    pid

可先通过ps -ef 查找出所要删除的进程pid，再通过kill -9 pid 终止进程

3.ifconfig命令

功能：显示网络设备

格式：ping  主机名或ip地址    （按ctrl+c停止ping）

<h4>备份压缩：tar命令</h4>

tar功能：文件备份压缩

格式：tar      参数       压缩后的文件名      被压缩的文件名

tar      参数       被解压的文件名      -C  指定目录            （如果省略 -C 指定目录，则解压到当前文件夹）

-c 建立一个压缩文件的参数指令（create）--压缩

-x 解开一个压缩文件的参数指令（extract）--解压

-z 是否需要用gzip压缩

-v 压缩的过程中显示文件（verbose）

-f 使用档名，在f之后要立即接档名（file）

常用解压参数组合：zxvf

常用压缩参数组合：zcvf

例如：

  tar  -zcvf  /root/1.tar   /root/a     将root目录下的a文件夹压缩成1.tar,放在root目录下。

  tar  -zxvf  ./1.tar        将当前目录下的1.tar文件解压缩

[注]：如果后缀名为.tar.gz的压缩包用-zxvf   如果后缀名为.tar的压缩包用-xvf

<h4>关机  重启</h4>

Linux centos 重启命令：reboot

Linux centos 关机命令：halt

<h4>文件权限：chmod命令</h4>

chmod功能：变更文件或目录的权限

语法：chmod [参数][&lt;权限范围>&lt;符号>&lt;权限代号>]

-R  或 --recursive   递归处理，将指定目录下的所有文件及子目录一并处理

--权限范围的表示法如下：

u：User  即文件或目录的拥有者

g：Group 即文件或目录的所属群组

o：Other  除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围

a：All        即全部的用户，包含拥有者，所属群组及其他用户。

--符号

<ul>
<li>添加权限</p></li>
<li><p>取消权限</p></li>
</ul>

<p>-- 有关权限代号的部分

r：读取权限，数字代号为“4”

w：写入权限，数字代号为“2”

x：执行或切换权限，数字代号为“1”

<ul>
<li>：不具任何权限，数字代号为“0”</li>
</ul>

777 ：所有权限

[注]：3=1+2（wx）   5=4+1(rx)

 

mkdir xxx  创建xxx目录

例如：

chmod    u-rwx   xxx    取消xxx目录的用户“读写执行”权限

chmod    g-rwx   xxx    取消xxx目录的组“读写执行”权限

chmod    777      xxx    给xxx目录添加所有权限       ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date><![CDATA[2019-12-14 19:40:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-14 11:40:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-01-29]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>这是一个文章测试</title>
		<link>http://114.116.235.65/2019/11/30/14/wrer__trashed.html</link>
		<pubDate>Fri, 29 Nov 2019 16:00:29 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
士大夫更加深刻的官方口径是的合规风控</ul>

撒地方会离开撒谎的饭卡圣诞快乐<strong>撒旦国防科技啥的饭卡</strong><!--more-->


萨的结果飞机喀什过的飞快阿桑的歌·[cc lang="c++"]史蒂夫卡股市大幅扩建嘎斯看到过饭卡是个kgsd
士大夫喀什灯笼裤给v分类是可见的贺卡收到快件[/cc]
[cc lang="c++"]ask发货的卡号的法律卡河上的电话v看
的看法不过v离开教室的克里夫
康师傅的监控和[/cc]
<!-- wp:paragraph -->
<p>这个就</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>不管，先谢谢</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2019-11-30 00:00:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-29 16:00:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wrer__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-11-29]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e8%bf%99%e6%98%af%e4%b8%80%e4%b8%aa%e6%96%87%e7%ab%a0%e6%b5%8b%e8%af%95]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[love]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577963094]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[wrer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>我就试试</title>
		<link>http://114.116.235.65/2019/12/06/122/test1__trashed.html</link>
		<pubDate>Fri, 06 Dec 2019 00:15:50 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[dskfgadgfksadgffdladskghklsadfhglasd
开始读人工费如果
<strong>撒发射点发射点给士大夫敢死队风格士大夫</strong>
啊谁说的公司的<ins datetime="2019-12-06T00:12:46+00:00"></ins>

<ol>啊书法大赛得分</ol>

sa'd's'd'f'gsadsdfg
<!--more-->
<img class="lazy" src="http://114.116.235.65/wp-content/uploads/2019/11/yourname.jpg"  data-original="http://114.116.235.65/wp-content/themes/hmj-blog/images/loading.gif">
<img class="lazy" src="http://114.116.235.65/wp-content/uploads/2019/11/yourname.jpg" alt="这是一个开始" />
山东分公司看到过方式<del datetime="2019-12-06T00:12:46+00:00">撒旦发射点士大夫股份公司的</del>
爱国发生]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2019-12-06 08:15:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-06 00:15:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[test1__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859322]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[test1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>豆腐干地方</title>
		<link>http://114.116.235.65/2019/12/04/123/sdfdsf__trashed.html</link>
		<pubDate>Wed, 04 Dec 2019 08:40:49 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[首个分段监管当局法国说的话v老客户的v收到v联合各方是开发和管理考核得分
是覅色联合国上课的话概括来说管理客户是受到联合国考虑适当给客户是速度会更快
收到客户过来看数据和德国说的话更合适的看过还是

<ul>事故的发生的非官方的分布式的
</ul>

<pre><code>&lt;li&gt;第三方公司的房价过快上帝就发公开&lt;/li&gt;
</code></pre>

<!--more-->

&lt;

blockquote>
[cc lang="html">]/** * Comment */</span> <span class="kw2">function</span> 
hello<span class="br0">(</span><span class="br0">)</span> 
<span class="br0">{</span> <span class="kw1">
echo</span> <span class="st0">"Hello!"</span><span class="sy0">;
</span> <span class="kw1">return</span> <span class="kw4">null</span>
<span class="sy0">;</span> <span class="br0">}</span>
 <a href="http://www.php.net/exit"><span class="kw3">exit</span></a><span class="br0">(</span>
<span class="br0">)</span><span class="sy0">;</span>"[/cc]

asffdqfsdfsdg微软方式v是否受到非人

粉色官方文书gsdgsgsgsdddddddddd是德国的

违法所得反反复复烦烦烦烦烦烦烦烦烦

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2019-12-04 16:40:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-04 08:40:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sdfdsf__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e7%91%9f%e5%a4%ab]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577963091]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[sdfdsf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:3;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[u准备好]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[467349534@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[117.136.7.90]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-05 08:41:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-05 00:41:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[才醒见识见识]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
			<wp:meta_value><![CDATA[1575506514]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1575506514.5664451;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1575519473.7486041;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"yconion";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>好烦</title>
		<link>http://114.116.235.65/2019/12/04/140/haofan__trashed.html</link>
		<pubDate>Wed, 04 Dec 2019 09:42:38 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[这是一个测试页

<!--more-->

[cc lang="c++"]
#include
using namespace std;

int main ()
{
// 数字定义
short s;
int i;
long l;
float f;
double d;
// 数字赋值
s = 10;
i = 1000;
l = 1000000;
f = 230.47;
d = 30949.374;
// 数字输出
cout &lt;&lt; "short s :" &lt;&lt; s &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl; cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
cout &lt;&lt; "int i :" &lt;&lt; i &lt;&lt; endl;
cout &lt;&lt; "long l :" &lt;&lt; l &lt;&lt; endl;
cout &lt;&lt; "float f :" &lt;&lt; f &lt;&lt; endl;
cout &lt;&lt; "double d :" &lt;&lt; d &lt;&lt; endl;
return 0;
}
[/cc]
豆腐干地方回复沙发好舒服]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2019-12-04 17:42:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-04 09:42:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[haofan__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e5%a5%bd%e7%83%a6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[65]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[kratos_love]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577963088]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[haofan]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>再来一个</title>
		<link>http://114.116.235.65/2019/12/04/189/zailaiyige__trashed.html</link>
		<pubDate>Wed, 04 Dec 2019 13:21:00 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=189</guid>
		<description></description>
		<content:encoded><![CDATA[是否打发打发噶发噶二哥规范化
还是私人谈话的软件
阿加大家啊官方机构开具的v快速导航v看
上课的合格考生的概括来说
阿佘法国空军五个了
<!--more-->

&lt;

ins datetime="2019-12-04T13:19:59+00:00">
<a href="http://114.116.235.65/index.php/guanyu2/">关于2</a>
奥尔格输入法规划土地]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date><![CDATA[2019-12-04 21:21:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-04 13:21:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[zailaiyige__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="cppbase"><![CDATA[c++基础]]></category>
		<category domain="category" nicename="linuxlite"><![CDATA[linux内核]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
		<category domain="category" nicename="yuanma"><![CDATA[源码刨析]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859331]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[zailaiyige]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>再试试两破案</title>
		<link>http://114.116.235.65/2019/12/06/221/6465464548231__trashed.html</link>
		<pubDate>Fri, 06 Dec 2019 02:40:31 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=221</guid>
		<description></description>
		<content:encoded><![CDATA[速度高房价的工夫就受到广泛
圣诞节风格士大夫额
氨基酸房管局阿斯蒂芬<!--more-->

俄外交官发吉萨官方机构军事大国分数都很高
是绝对国防军事大国]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date><![CDATA[2019-12-06 10:40:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-06 02:40:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[6465464548231__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859319]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[6465464548231]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>萨菲航空技术大会开始觉得很热</title>
		<link>http://114.116.235.65/2019/12/06/225/97864531298645312__trashed.html</link>
		<pubDate>Fri, 06 Dec 2019 02:42:09 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[是个打开对话框说大话给客人退款不发胖上帝给你，深刻的刚开始看房东不肯给的反馈给
上的刚开始跟客户说<!--more-->

三个阶段刚开始觉得公开第三个考试大纲
山东高考考生的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2019-12-06 10:42:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-06 02:42:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[97864531298645312__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[42]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859316]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[97864531298645312]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>时间不会改变我对你的想念</title>
		<link>http://114.116.235.65/2019/11/10/228/%e6%97%b6%e9%97%b4%e4%b8%8d%e4%bc%9a%e6%94%b9%e5%8f%98%e6%88%91%e5%af%b9%e4%bd%a0%e7%9a%84%e6%83%b3%e5%bf%b5__trashed.html</link>
		<pubDate>Sat, 09 Nov 2019 23:30:25 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[怎么科能会自己的凤凰覅u是的v肯定是
的恐惧很快就速度很快v
根深蒂固散热<strong>
ask的高房价考试大纲开发</strong>
发的是广东人<ins datetime="2019-12-09T23:29:34+00:00">股市跌幅高达
德国商人各色灯光
</ins>
<!--more-->
465
都是符合公司开具东方化工科技开始感到困惑的
东方时空观念肯定就发给]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2019-11-10 07:30:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-09 23:30:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%b6%e9%97%b4%e4%b8%8d%e4%bc%9a%e6%94%b9%e5%8f%98%e6%88%91%e5%af%b9%e4%bd%a0%e7%9a%84%e6%83%b3%e5%bf%b5__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019-12-10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1578462591]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e6%97%b6%e9%97%b4%e4%b8%8d%e4%bc%9a%e6%94%b9%e5%8f%98%e6%88%91%e5%af%b9%e4%bd%a0%e7%9a%84%e6%83%b3%e5%bf%b5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>这是但还是房价快速的回复可适当</title>
		<link>http://114.116.235.65/2019/12/29/263/%e8%bf%99%e6%98%af%e4%bd%86%e8%bf%98%e6%98%af%e6%88%bf%e4%bb%b7%e5%bf%ab%e9%80%9f%e7%9a%84%e5%9b%9e%e5%a4%8d%e5%8f%af%e9%80%82%e5%bd%93__trashed.html</link>
		<pubDate>Sun, 29 Dec 2019 05:23:55 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[问题为儿童为日后
而受到客户观看热灸
圣诞节然后给IEryihgierh我看个人觉
<!--more-->

威尔法人人[leaf_demo leaf="" href="www.baidu.com"]网速儿工委符合吴谔[/leaf_demo]
的gfwjegfgweyg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 13:23:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-29 05:23:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%99%e6%98%af%e4%bd%86%e8%bf%98%e6%98%af%e6%88%bf%e4%bb%b7%e5%bf%ab%e9%80%9f%e7%9a%84%e5%9b%9e%e5%a4%8d%e5%8f%af%e9%80%82%e5%bd%93__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linuxlite"><![CDATA[linux内核]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859312]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e8%bf%99%e6%98%af%e4%bd%86%e8%bf%98%e6%98%af%e6%88%bf%e4%bb%b7%e5%bf%ab%e9%80%9f%e7%9a%84%e5%9b%9e%e5%a4%8d%e5%8f%af%e9%80%82%e5%bd%93]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>堆排序原理</title>
		<link>http://114.116.235.65/2020/01/09/462/%e5%a0%86%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Thu, 09 Jan 2020 14:58:08 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>堆排序</h3>

<blockquote>
  堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。 ---百度百科
</blockquote>

<strong>在理解堆排序之前先对完全二叉树要有个简单的概念</strong>
- 完全二叉树： 除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐。
<a href="http://114.116.235.65/wp-content/uploads/2020/01/1625739a03779fa3.png"><img src="http://114.116.235.65/wp-content/uploads/2020/01/1625739a03779fa3.png" alt="" /></a>
- 满二叉树：除了叶子结点之外的每一个结点都有两个孩子，每一层(当然包含最后一层)都被完全填充。
<a href="http://114.116.235.65/wp-content/uploads/2020/01/1625739a038d7d2b.png"><img src="http://114.116.235.65/wp-content/uploads/2020/01/1625739a038d7d2b.png" alt="" /></a>
- 完满二叉树：除了叶子结点之外的每一个结点都有两个孩子结点。
<a href="http://114.116.235.65/wp-content/uploads/2020/01/1625739a039716c0.png"><img src="http://114.116.235.65/wp-content/uploads/2020/01/1625739a039716c0.png" alt="" /></a>

<hr />

参考：<a href="https://www.cnblogs.com/Java3y/p/8639937.html" title="https://www.cnblogs.com/Java3y/p/8639937.html">https://www.cnblogs.com/Java3y/p/8639937.html</a>

<hr />

<strong>其中，完全二叉树有一个重要性质</strong>：
- 左边子节点位置 = 当前父节点的两倍 + 1
- 右边子节点位置 = 当前父节点的两倍 + 2

<h4>简单建堆过程分析</h4>

<ul>
<li>一次过程中，需要通过该二叉树结构找到最大值（或最小值），在该值的寻找过程中，以父节点与其左右节点所构成的点关系能够找出最大点（或最小点），将其移动至父节点位置。</li>
<li>依次类推，直至最值移动到根节点位置，此时可以算作建堆完成。</li>
<li>但以上只是取出在该数据结构中（比如数组存放）一个最值，所以，可以将其与数组最后一个值交换以达到<strong>保存</strong>的作用。</li>
<li>在次执行前面两个建堆的过程，循环往复，得到一个顺序的数组（大根堆）。</li>
</ul>

<h5>ps:具体代码之后以具体的题目展示。</h5>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 22:58:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 14:58:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a0%86%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%a0%86%e6%8e%92%e5%ba%8f"><![CDATA[堆排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[37]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>选择排序原理</title>
		<link>http://114.116.235.65/2020/01/09/467/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Thu, 09 Jan 2020 15:22:01 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=467</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>选择排序</h3>

<blockquote>
  选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。---百度百科
</blockquote>

选择排序对于我们来说应该不算一种复杂的排序方法，简而言之嵌套循环就能解决，通过一个暂存值存放大值（或者小值）--该值初始可以以数组第一个值为初始量，依次与后面的值比较，大值交换进入暂存，最后得到整个数组最大值放入数组第一个位置。再以后面所有数为小数组按上次方法得到大值，依次完成该操作完成逆序数组获取任务。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>467</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 23:22:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 15:22:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f"><![CDATA[选择排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>希尔排序原理</title>
		<link>http://114.116.235.65/2020/01/10/469/%e5%b8%8c%e5%b0%94%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Fri, 10 Jan 2020 01:53:48 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>希尔排序</h3>

--百度百科

<blockquote>
  <ul>
  <li>希尔排序(Shell's Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</li>
  <li>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</li>
  </ul>
</blockquote>

插入排序对于小规模数据或者基本有序数据更体现优势。而对于较大规模或者无序的数据应用希尔排序比单纯的插入排序更有性能优势。

<h4>具体实现逻辑</h4>

<strong>在取量逻辑分组过程中有点类似快排等排序方法，即大换小，一个大数组按一定规则换为两小数组，依次执行。</strong>

<ol>
<li>进行逻辑分区，若该数组大小为8（举例），此时可以以数组下标间隔4为一组，此时只有两个数在一组内，比较符合插入排序的小规模数据特点，所以可以对逻辑分组进行插入排序。</li>
<li>再针对该数组以间隔为2组成逻辑分组（并没有改变数组数据顺序），在各逻辑分组内进行插入排序（因为经过1步骤，数组有序性更好）</li>
</ol>

<h2>3. 按上步骤直至增量为1进行插入排序使得数据有序。</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 09:53:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 01:53:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b8%8c%e5%b0%94%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b8%8c%e5%b0%94%e6%8e%92%e5%ba%8f"><![CDATA[希尔排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[36]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>插入排序原理</title>
		<link>http://114.116.235.65/2020/01/10/473/%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Fri, 10 Jan 2020 13:04:46 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=473</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>插入排序</h2>

<blockquote>
  插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。---百度百科
</blockquote>

<a href="http://114.116.235.65/wp-content/uploads/2020/01/3974900-a076b3f60b618185.gif"><img src="http://114.116.235.65/wp-content/uploads/2020/01/3974900-a076b3f60b618185.gif" alt="" /></a>

<hr />

<strong>插入排序比较简单，在于比较挪位同时以tmp值保存提出的待插值，此时也会出现空位便于数组数值移动。</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>473</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:04:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:04:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%8f%92%e5%85%a5%e6%8e%92%e5%ba%8f"><![CDATA[插入排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[32]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>基数排序原理</title>
		<link>http://114.116.235.65/2020/01/10/476/%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Fri, 10 Jan 2020 13:41:06 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=476</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>基数排序</h3>

<blockquote>
  基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。---百度百科
</blockquote>

<h4>桶排序</h4>

<blockquote>
  桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。---百度百科
</blockquote>

图片示例：

<h2><a href="http://114.116.235.65/wp-content/uploads/2020/01/2018033115584192.gif"><img src="http://114.116.235.65/wp-content/uploads/2020/01/2018033115584192.gif" alt="" /></a></h2>

分割线

<hr />

<a href="http://114.116.235.65/wp-content/uploads/2020/01/20190219081232815.png"><img src="http://114.116.235.65/wp-content/uploads/2020/01/20190219081232815.png" alt="" /></a>

**由图看出桶排序的原理为 **分区存放****，以堆栈的方式比较合适。

<h4>基数排序分析</h4>

<a href="http://114.116.235.65/wp-content/uploads/2020/01/11765489-853a6001b7a7e473.gif"><img src="http://114.116.235.65/wp-content/uploads/2020/01/11765489-853a6001b7a7e473.gif" alt="" /></a>

<hr />

<ul>
<li>先以个位数的大小进行桶排序，再将数从桶中拿出，此时数组数值大小是按个位数大小排序的（该顺序不易破坏，当在进行十位数排序时，同一个桶内会保持个位数大小排序，正是利用该特点，能得到较好性能排序效果）。</li>
<li>然后按十位数进行桶排序，依次直至最高位都为零了，能够得到顺序数组。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>476</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 21:41:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 13:41:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%9f%ba%e6%95%b0%e6%8e%92%e5%ba%8f"><![CDATA[基数排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[33]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>归并排序原理</title>
		<link>http://114.116.235.65/2020/01/10/482/%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Fri, 10 Jan 2020 14:17:09 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=482</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>归并排序</h3>

<blockquote>
  归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。归并排序是一种稳定的排序方法。---百度百科
</blockquote>

图示：
<a href="http://114.116.235.65/wp-content/uploads/2020/01/7789414-2737ec30a70ff74f.gif"><img src="http://114.116.235.65/wp-content/uploads/2020/01/7789414-2737ec30a70ff74f.gif" alt="" /></a>

<hr />

归并排序在于<strong>一拆一合</strong>

<ul>
<li>拆------ 首先，将数组拆成两份，在分别对每份拆成两份，一直如此直至只有一个数或者两个数组成一份的规模（这其实也是逻辑上的，并不是真要创建多余空间存放）。</li>
<li>合------ 然后，将两个数进行排序得到一份有序数值片段，然后将有序的两个数组片段再进行排序合并为一份。</li>
<li>重点在于合的过程实现。可以创建一个新的临时结构来存放新和成的“一份”的量，该存放过程从两个小份起始位置来进行比较，较大值（或较小值）先放入，因为每一小份都是有序的，所以可以利用其特点来进行判断取值，和成大份规模数组之后得放入原来数组下标范围内存放。最后生成一个完整结果。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 22:17:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 14:17:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%bd%92%e5%b9%b6%e6%8e%92%e5%ba%8f"><![CDATA[归并排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>二分查找原理</title>
		<link>http://114.116.235.65/2020/01/10/485/%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Fri, 10 Jan 2020 14:35:24 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=485</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>二分查找</h3>

<blockquote>
  二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。---百度百科
</blockquote>

<a href="https://www.cnblogs.com/idreamo/p/9000762.html"><img src="http://114.116.235.65/wp-content/uploads/2020/01/1281268-20180509063436446-1450605939.png" alt="" /></a>

<ol>
<li>首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。</p></li>
<li><p>如果目标元素大于/小于中间元素，则在数组大于/小于中间元素的那一半区域查找，然后重复步骤 1 的操作。</p></li>
<li><p>如果某一步数组为空，则表示找不到目标元素。</p></li>
</ol>

<p>二分法查找的时间复杂度O(logn)。<strong>主要在于原数组为有序数组</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>485</wp:post_id>
		<wp:post_date><![CDATA[2020-01-10 22:35:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-10 14:35:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%8c%e5%88%86%e6%9f%a5%e6%89%be%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%8c%e5%88%86"><![CDATA[二分]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[49]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>贪心算法原理</title>
		<link>http://114.116.235.65/2020/01/11/488/%e8%b4%aa%e5%bf%83%e7%ae%97%e6%b3%95%e5%8e%9f%e7%90%86.html</link>
		<pubDate>Sat, 11 Jan 2020 11:38:12 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>贪心算法</h3>

<blockquote>
  贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。
  贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。---百度百科
</blockquote>

贪心算法对我个人来讲还是很抽象的一种算法理念，其不去强求全局最优解而只通过局部最优解综合考虑一个较合理的解的思想在实际运用过程中比较困然，特别对于子问题的分析，如何判别拆分出来这种子问题不是很清晰。

<h4>适用问题</h4>

贪心策略适用的前提是：局部最优策略能导致产生全局最优解。
实际上，贪心算法适用的情况很少。一般对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可以做出判断。

<h5>结构：</h5>

while (朝给定总目标前进一步)
{
利用可行的决策，求出可行解的一个解元素。
}
由所有解元素组合成问题的一个可行解；

<h5>例子</h5>

比较常见的例子就像0-1背包问题等等。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date><![CDATA[2020-01-11 19:38:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-11 11:38:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%aa%e5%bf%83%e7%ae%97%e6%b3%95%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e8%b4%aa%e5%bf%83"><![CDATA[贪心]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[50]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>最长公共子序列问题</title>
		<link>http://114.116.235.65/2020/01/12/490/%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%ad%90%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98.html</link>
		<pubDate>Sun, 12 Jan 2020 13:21:24 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=490</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>最长公共子序列</h3>

首先，对于最长公共子序列得先有个基本概念，清楚知道公共子序列与公共字符串的区别。
如：

<table>
<thead>
<tr>
  <th align="right">5</th>
  <th align="right">A</th>
  <th align="right">G</th>
  <th align="right">D</th>
  <th align="right">W</th>
  <th align="right">B</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="right"><strong>A</strong></td>
  <td align="right">f</td>
  <td align="right"><strong>D</strong></td>
  <td align="right">c</td>
  <td align="right"><strong>B</strong></td>
  <td align="right">n</td>
</tr>
</tbody>
</table>

<ul>
<li>ADB即为最长公共子序列</li>
</ul>

<table>
<thead>
<tr>
  <th align="center">5</th>
  <th align="center">A</th>
  <th align="center">G</th>
  <th align="center">D</th>
  <th align="center">W</th>
  <th align="center">B</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center"><strong>5</strong></td>
  <td align="center"><strong>A</strong></td>
  <td align="center">D</td>
  <td align="center">B</td>
  <td align="center">W</td>
  <td align="center">G</td>
</tr>
</tbody>
</table>

<ul>
<li>5A即为公共字符串</li>
</ul>

<h4>最长公共子序列的求取</h4>

该问题为一个经典的动态规划问题，对于动态规划，像分治一样，也要分析小问题，但它之所以不叫分治，在于其内部小问题的体现或者叫实现解决方法是通过获取重叠问题答案得出的，即会通过一定的手段将很小的或者叫重叠的小问题的结果保存，然后得出最后的结果，<strong>如本问题---最长公共子序列</strong>，它便是通过一个二维数组结构保存信息，行和列分别表示两个字符串的长度。

具体解决过程参考：

<hr />

<a href="https://www.cnblogs.com/zlm-jessie/p/5664562.html" title="https://www.cnblogs.com/zlm-jessie/p/5664562.html">https://www.cnblogs.com/zlm-jessie/p/5664562.html</a>

<hr />

<ul>
<li>先定义一个给定序列的子序列，就是将给定序列中零个或多个元素去掉之后得到的结果，其形式化定义如下：给定一个序列X = &lt;x1,x2 ,..., xm>，另一个序列Z =&lt;z1,z2 ,..., zk> 满足如下条件时称为X的子序列，即存在一个严格递增的X的下标序列&lt;i1,i2 ,..., ik>，对于所有j = 1,2,...,k，满足xij = zj，例如，Z=&lt;B,C,D,B>是X=&lt;A,B,C,B,D,A,B>的子序列，对应的下标序列为&lt;2,3,5,7>。给定两个序列X和Y，如果Z是X的子序列，也是Y的子序列，则称它是X和Y的公共子序列。</p></li>
<li><p>最长公共子序列问题(longest-common-subsequence problem)可用动态规划方法高效地求解。</p></li>
</ul>

<p>步骤1：刻画最长公共子序列的特征

<ul>
<li>LCS问题具有 最优子结构性质。子问题的自然分类对应两个输入序列的“前缀"对。"前缀"的定义如下：给定一个序列X = &lt;x1,x2 ,..., xm>，对于i = 0,1,...,m，定义X的第i前缀为Xi = &lt;x1,x2 ,..., xi>。例如，若 X = &lt;A,B,C,B,D,A,B>，则 X4 = &lt;A,B,C,B>，X0为空串。

<ul>
<li>令X = &lt;x1,x2 ,..., xm>和Y = &lt;y1,y2 ,..., yn> 为两个序列，Z =&lt;z1,z2 ,..., zk>为X和Y的任意LCS。</p></li>
<li><p>如果Xm = Yn，则 Zk =  Xm = Yn且Zk-1 是Xm-1和Yn-1的一个LCS。
如果 Xm ≠ Yn，那么Zk ≠  Xm意味着Z是Xm-1和Y的一个LCS。
如果 Xm ≠ Yn，那么Zk ≠  Yn意味着Z是X和Yn-1的一个LCS。
步骤2：一个递归解</p></li>
<li><p>很容易看出LCS问题的重叠子问题性质。为了求X和Y的一个LCS，我们可能需要求X和Yn-1的一个LCS及Xm-1和Y的一个LCS。但是这几个子问题都包含求解Xm-1和Yn-1的LCS的子子问题。我们定义c[i,j]表示Xi和Yj的LCS的长度。如果i= 0 或j = 0，即一个序列长度为0，那么LCS的长度为0，根据LCS问题的最优子结构性质，可得如下公式：
<img src="http://114.116.235.65/wp-content/uploads/2020/01/703358-20160712170216170-126802192.jpg" alt="" /></p></li>
</ul></li>
</ul>

<p>这篇文章对于该问题或者是动态规划的理解都能给人较好的启发认识：

<h2><a href="https://www.cnblogs.com/hapjin/p/5572483.html" title="https://www.cnblogs.com/hapjin/p/5572483.html">https://www.cnblogs.com/hapjin/p/5572483.html</a></h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date><![CDATA[2020-01-12 21:21:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-12 13:21:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e9%95%bf%e5%85%ac%e5%85%b1%e5%ad%90%e5%ba%8f%e5%88%97%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9c%80%e9%95%bf%e5%ad%90%e5%ba%8f%e5%88%97"><![CDATA[最长子序列]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[45]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>简单shard_ptr的实现</title>
		<link>http://114.116.235.65/2020/01/13/494/%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0.html</link>
		<pubDate>Mon, 13 Jan 2020 07:41:41 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=494</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>shard_ptr的学习</h3>

在之前的一篇<a href="http://114.116.235.65/2020/01/03/421/%e6%99%ba%e8%83%bd%e6%8c%87%e9%92%88.html" title="博文">博文</a>里，已经有相关智能指针的介绍和使用情况，了解基本的使用当然是必须的能力或者应该具备的基础，这里在通过代码实现其过程则更能提高个人素养。
<strong>写了什么并不重要，代码本身也是网上的参考资料，只要能形成自己的思维与知识体系就能算得到了其精华部分了。这里就记下自己手打代码以及后面的整体性思考</strong>

<hr />

<h3>整体性认识</h3>

能够看到，基本的一些关于shard_ptr的介绍都提到了一个计数器的概念，该计数器的存在可以使得指针不会在多线程下的情况下误删指针。只有当计数器为0时，指针才会被删除。

<img src="http://114.116.235.65/wp-content/uploads/2020/01/QQ图片20200113134559.png" alt="" />

<strong>整个智能指针是通过smart_ptr类来实现的下面是其重载的构造函数</strong>

<img src="http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-144301.png" alt="" />

<ul>
<li>其中 <code>smart_ptr()</code>表示指向空指针的构造方式</li>
<li><code>smart_ptr(T *t)</code> 初始化，指针指向t的地址，此时计数器，也即_counter类对象为数据1。</li>
<li><code>smart_ptr(const smart_ptr&lt;T&gt;&amp; rhs)</code> 该初始方法为从另一个智能指针处进行初始化拷贝，此时创建的智能指针对象就相当于rhs的一个别名，但计数器得加一。</li>
<li><code>smart_ptr &lt;T&gt;&amp; operator=(const smart_ptr&lt;T&gt;&amp; rhs)</code>这个就更常见了“=”操作符重载，作用效果与上一个一样<code>smart_ptr(const smart_ptr&lt;T&gt;&amp; rhs)</code>。
<strong>然后就是智能指针对象析构时都会指执行的<code>clear()</code></strong></li>
</ul>

<pre><code class="language-cpp ">    void clear()
    {
        if(ptr==nullptr)
        return ;

        pc-&gt;count--;
        if(pc-&gt;count==0)
        {
            delete ptr;
        }
        if(pc-&gt;count==0 &amp;&amp; pc-&gt;count_weak==0)
        {
            delete pc;
        }

        pc = nullptr;
        ptr = nullptr;
    }
</code></pre>

主要进行一个计数器判断，如果计数器为0，自然就代表没有指针再指向目标地址了，所以可以让其delete,否则就是计数器减一。

<img src="http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-151325.png" alt="" />

<h5>类似于weak_ptr，这里也实现了一个<code>smart_ptr_weak()</code>,来完成lock功能任务等。</h5>

整体代码结构近似于smart_ptr,唯一的不同在于<strong>它只是起到了一个保存智能指针对象实际所指向地址和保存计数类的功能，其计数器类对象内部关于smart_ptr的count数据不会增加，而count_weak会增加1</strong>

<img src="http://114.116.235.65/wp-content/uploads/2020/01/批注-2020-01-13-152310.png" alt="" />

其构造重载在上图，会针对<code>int count_weak</code>进行增减。

<blockquote>
  <strong>其实weak_ptr本身设计的很简单，就是为了辅助shared_ptr的，它本身不能直接定义指向原始指针的对象，只能指向shared_ptr对象，同时也不能将weak_ptr对象直接赋值给shared_ptr类型的变量，最重要的一点是赋值给它不会增加引用计数</strong> ---网络
  所以该类的实现与weak_ptr逻辑相合。
</blockquote>

这是我认为weak_ptr与这个简单的smart_ptr_weak()的核心所在，通过它达成上面的目标功能。

<pre><code class="language-cpp ">   smart_ptr&lt;T&gt; lock()
    {
        smart_ptr&lt;T&gt; tmp;
        if(pc==nullptr||pc-&gt;count==0)
        {
            return tmp;
        }

        tmp.pc = pc;
        tmp.ptr = ptr;
        tmp.pc-&gt;count_weak++;
        return tmp;
    }
</code></pre>

简单例子：

<pre><code class="language-cpp ">#include &lt;iostream&gt;
#include &lt;string&gt;
#include "smartptr.h"

using namespace std;

class myptr
{
public:
    smart_ptr_weak&lt;myptr&gt; parent;
    smart_ptr&lt;myptr&gt; child;
    string name_t;
    myptr(string name):name_t(name)
    {
        cout&lt;&lt;"创建:"&lt;&lt;name_t&lt;&lt;endl;
    }

    ~myptr(){
        cout&lt;&lt;"销毁:"&lt;&lt;name_t&lt;&lt;endl;
    }

};

int main()
{
    smart_ptr&lt;myptr&gt; p1(new myptr("第一个"));
    smart_ptr&lt;myptr&gt; p2(new myptr("第二个"));
    p1-&gt;child=p2;
    p2-&gt;parent=p1;
    auto ptr = p2-&gt;parent.lock();
    cout&lt;&lt;ptr-&gt;name_t&lt;&lt;endl;

}
</code></pre>

<a href="https://github.com/yangcong666/learn_for_cpp/tree/master/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88" title="github地址">github地址</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date><![CDATA[2020-01-13 15:41:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-13 07:41:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%80%e5%8d%95shard_ptr%e7%9a%84%e5%ae%9e%e7%8e%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="cppbase"><![CDATA[c++基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>stl的vector基本方法与源码学习</title>
		<link>http://114.116.235.65/2020/01/15/501/stl%e7%9a%84vector%e5%9f%ba%e6%9c%ac%e6%96%b9%e6%b3%95%e4%b8%8e%e6%ba%90%e7%a0%81%e5%ad%a6%e4%b9%a0.html</link>
		<pubDate>Wed, 15 Jan 2020 10:56:44 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=501</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>vector介绍</h3>

一、vector的介绍
来源：

<a href="https://blog.csdn.net/chenxiyuehh/article/details/88315032" title="https://blog.csdn.net/chenxiyuehh/article/details/88315032">https://blog.csdn.net/chenxiyuehh/article/details/88315032</a>

<ol>
<li>vector是表示可变大小数组的序列容器。</li>
<li>就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理。</li>
<li>本质讲，vector使用动态分配数组来存储它的元素。当新元素插入时候，这个数组需要被重新分配大小为了增加存储空间。其做法是，分配一个新的数组，然后将全部元素移到这个数组。就时间而言，这是一个相对代价高的任务，因为每当一个新的元素加入到容器的时候，vector并不会每次都重新分配大小。</li>
<li>vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为存储空间比实际需要的存储空间更大。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。</li>
<li>因此，vector占用了更多的存储空间，为了获得管理存储空间的能力，并且以一种有效的方式动态增长。</li>
<li>与其它动态序列容器相比（deques, lists and forward_lists）， vector在访问元素的时候更加高效，在末尾添加和删除元素相对高效。对于其它不在末尾的删除和插入操作，效率更低。比起lists和forward_lists统一的迭代器和引用更好。</li>
</ol>

<h3>基本用法</h3>

来源：<a href="https://www.cnblogs.com/Nonono-nw/p/3462183.html" title="https://www.cnblogs.com/Nonono-nw/p/3462183.html">https://www.cnblogs.com/Nonono-nw/p/3462183.html</a>
vector 是向量类型，它可以容纳许多类型的数据，如若干个整数，所以称其为容器。vector 是C++ STL的一个重要成员，使用它时需要包含头文件：

<code>#include&lt;vector&gt;</code>

一、vector 的初始化：可以有五种方式,举例说明如下：

<pre><code class="language-cpp ">vector&lt;int&gt; a(10); //定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），但没有给出初值，其值是不确定的。
vector&lt;int&gt; a(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1
vector&lt;int&gt; a(b); //用b向量来创建a向量，整体复制性赋值
vector&lt;int&gt; a(b.begin(),b.begin+3); //定义了a值为b中第0个到第2个（共3个）元素
int b[7]={1,2,3,4,5,9,8};
vector&lt;int&gt; a(b,b+7); //从数组中获得初值
</code></pre>

二、vector对象的几个重要操作，举例说明如下：

<pre><code class="language-cpp ">a.assign(b.begin(), b.begin()+3); //b为向量，将b的0~2个元素构成的向量赋给a
a.assign(4,2); //是a只含4个元素，且每个元素为2
a.back(); //返回a的最后一个元素
a.front(); //返回a的第一个元素
a[i]; //返回a的第i个元素，当且仅当a[i]存在2013-12-07
a.clear(); //清空a中的元素
a.empty(); //判断a是否为空，空则返回ture,不空则返回false
a.pop_back(); //删除a向量的最后一个元素
a.erase(a.begin()+1,a.begin()+3); //删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）
a.push_back(5); //在a的最后一个向量后插入一个元素，其值为5
a.insert(a.begin()+1,5); //在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4
a.insert(a.begin()+1,3,5); //在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5
a.insert(a.begin()+1,b+3,b+6); //b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如b为1,2,3,4,5,9,8 ，插入元素后为1,4,5,9,2,3,4,5,9,8
a.size(); //返回a中元素的个数；
a.capacity(); //返回a在内存中总共可以容纳的元素个数
a.resize(10); //将a的现有元素个数调至10个，多则删，少则补，其值随机
a.resize(10,2); //将a的现有元素个数调至10个，多则删，少则补，其值为2
a.reserve(100); //将a的容量（capacity）扩充至100，也就是说现在测试a.capacity();的时候返回值是100.这种操作只有在需要给a添加大量数据的时候才显得有意义，因为这将避免内存多次容量扩充操作（当a的容量不足时电脑会自动扩容，当然这必然降低性能） 
a.swap(b); //b为向量，将a中的元素和b中的元素进行整体性交换
a==b; //b为向量，向量的比较操作还有!=,&gt;=,&lt;=,&gt;,&lt;
</code></pre>

三、顺序访问vector的几种方式，举例说明如下:

（1）向向量a中添加元素
1. 
1  vector<int> a;
2 for(int i=0;i&lt;10;i++)
3 a.push_back(i);

<ol start="2">
<li>也可以从数组中选择元素向向量中添加
int a[6]={1,2,3,4,5,6};
vector<int> b；
for(int i=1;i&lt;=4;i++)
b.push_back(a[i]);</p></li>
<li><p>也可以从现有向量中选择元素向向量中添加
int a[6]={1,2,3,4,5,6};
vector<int> b;
vector<int> c(a,a+4);
for(vector<int>::iterator it=c.begin();it&lt;c.end();it++)
b.push_back(*it);</p></li>
<li><p>也可以从文件中读取元素向向量中添加
ifstream in("data.txt");
vector<int> a;
for(int i; in>>i)
a.push_back(i);</p></li>
<li><p><strong>【误区】</strong>
<strong>vector<int> a;
for(int i=0;i&lt;10;i++)
a[i]=i;
//这种做法以及类似的做法都是错误的。刚开始我也犯过这种错误，后来发现，下标只能用于获取已存在的元素，而现在的a[i]还是空的对象</strong></p></li>
</ol>

<p>（2）从向量中读取元素
1. 通过下标方式读取
int a[6]={1,2,3,4,5,6};
vector<int> b(a,a+4);
for(int i=0;i&lt;=b.size()-1;i++)
    cout&lt;&lt;b[i]&lt;&lt;" ";

<ol start="2">
<li>通过遍历器方式读取
int a[6]={1,2,3,4,5,6};
vector<int> b(a,a+4);
for(vector<int>::iterator it=b.begin();it!=b.end();it++)
cout&lt;&lt;*it&lt;&lt;" ";</li>
</ol>

四、几种重要的算法，使用时需要包含头文件：

<pre><code class="language-cpp ">#include&lt;algorithm&gt;
sort(a.begin(),a.end()); //对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列
reverse(a.begin(),a.end()); //对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1
copy(a.begin(),a.end(),b.begin()+1); //把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素
find(a.begin(),a.end(),10); //在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置
</code></pre>

<h3>源码分析</h3>

以下源码来源为侯捷大师的《stl源码分析》

<pre><code class="language-cpp ">template &lt;class T, classAlloc = alloc&gt;
class vector {
public:
 // vector 的巢状型别定义
 typedef T value_type;
 typedef value_type*pointer;
 typedef value_type*iterator;
 typedef value_type&amp;reference;
 typedef size_t size_type;
 typedef ptrdiff_tdifference_type;
protected:
// 以下，simple_alloc 是 SGI STL的空间配置器，见 2.2.4节。
 typedefsimple_alloc&lt;value_type,Alloc&gt;data_allocator;
 iterator start;
 iterator finish;
//表示目前使用空间的头
//表示目前使用空间的尾
 iterator end_of_storage; //表示目前可用空间的尾
 void insert_aux(iterator position, const T&amp; x);
 void deallocate() {
 if (start)
data_allocator::deallocate(start, end_of_storage - start);
 }
 void fill_initialize(size_type n, const T&amp; value) {
 start =allocate_and_fill(n, value);
 finish = start + n;
 end_of_storage = finish;
 }
public:
 iterator begin() { return start; }
 iterator end() { return finish; }
 size_typesize() const { return size_type(end() - begin()); }
 size_typecapacity() const {
 return size_type(end_of_storage - begin()); }
 bool empty() const { return begin() == end(); }
 referenceoperator[](size_type n) { return *(begin() + n); } 
</code></pre>

<strong>在上面的结构或方法中， iterator start;iterator finish;这两个迭代器是相当重要的，在整个vector构建与实现方法中都基本有所体现</strong>

<pre><code class="language-cpp ">iterator begin() { return start; }
 iterator end() { return finish; }
 size_typesize() const { return size_type(end() - begin()); }
 size_typecapacity() const {
 return size_type(end_of_storage - begin()); }
 bool empty() const { return begin() == end(); }
 referenceoperator[](size_type n) { return *(begin() + n); }
vector() : start(0), finish(0), end_of_storage(0) {}
vector(size_type n, const T&amp; value) {fill_initialize(n, value); }
vector(int n, const T&amp; value) { fill_initialize(n, value); }
vector(long n, const T&amp; value) { fill_initialize(n, value); }
 explicit vector(size_type n) { fill_initialize(n, T()); }
~vector()
destroy(start, finish); //全域函式，见 2.2.3节。
 }
deallocate(); // 这是 vector 的一个 member function
 referencefront() { return *begin(); } //第一个元素
 referenceback() { return *(end() - 1); }//最后一个元素
 void push_back(const T&amp; x) {
 if (finish != end_of_storage) {
//将元素安插至最尾端
construct(finish, x); //全域函式，见 2.2.3节。
 ++finish;
 }
 else
 }
insert_aux(end(), x); // 这是 vector 的一个 member function
 void pop_back() { //将最尾端元素取出
      --finish;
destroy(finish);
 }
//全域函式，见 2.2.3节。
117
 iterator erase(iterator position) {
 if (position + 1 != end())
//清除某位置上的元素
copy(position + 1, finish, position);//后续元素往前搬移
 --finish;
destroy(finish);
 return position;
 }
//全域函式，见 2.2.3节。
 void resize(size_type new_size, const T&amp; x) {
 if (new_size &lt; size())
erase(begin() + new_size, end());
 else
insert(end(), new_size - size(), x);
 }
 void resize(size_type new_size) {resize(new_size, T()); }
 void clear() { erase(begin(), end()); }
protected:
 // 配置空间并填满内容
 iterator allocate_and_fill(size_type n, const T&amp; x) {
 iterator result =data_allocator::allocate(n);
uninitialized_fill_n(result, n, x); // 全域函式，见 2.3 节
 return result; 
</code></pre>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>501</wp:post_id>
		<wp:post_date><![CDATA[2020-01-15 18:56:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 10:56:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stl%e7%9a%84vector%e5%9f%ba%e6%9c%ac%e6%96%b9%e6%b3%95%e4%b8%8e%e6%ba%90%e7%a0%81%e5%ad%a6%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>适当方式打开回复</title>
		<link>http://114.116.235.65/2020/01/01/134/__trashed-3.html</link>
		<pubDate>Wed, 01 Jan 2020 06:15:29 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>dfsdfgdsfgdfg</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>s'd'f'g's'd'f'g'dsdfgsdfgd</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":137} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2020-01-01 14:15:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-01 06:15:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed-3]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[杂项]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_edit_mode]]></wp:meta_key>
		<wp:meta_value><![CDATA[builder]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_template_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[wp-post]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_version]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.7.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1577859329]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>未命名可重用区块</title>
		<link>http://114.116.235.65/2019/12/04/137/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97.html</link>
		<pubDate>Wed, 04 Dec 2019 09:29:56 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/index.php/2019/12/04/%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:shortcode -->
#include <iostream>
using namespace std;
 
int main ()
{
   // 数字定义
   short  s;
   int    i;
   long   l;
   float  f;
   double d;
   
   // 数字赋值
   s = 10;      
   i = 1000;    
   l = 1000000; 
   f = 230.47;  
   d = 30949.374;
   
   // 数字输出
   cout << "short  s :" << s << endl;
   cout << "int    i :" << i << endl;
   cout << "long   l :" << l << endl;
   cout << "float  f :" << f << endl;
   cout << "double d :" << d << endl;
 
   return 0;
}
<!-- /wp:shortcode -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2019-12-04 17:29:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-04 09:29:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e5%91%bd%e5%90%8d%e5%8f%af%e9%87%8d%e7%94%a8%e5%8c%ba%e5%9d%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_elementor_controls_usage]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>冒泡排序原理</title>
		<link>http://114.116.235.65/2020/01/08/436/%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86__trashed.html</link>
		<pubDate>Wed, 08 Jan 2020 12:47:49 +0000</pubDate>
		<dc:creator><![CDATA[yconion]]></dc:creator>
		<guid isPermaLink="false">http://114.116.235.65/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>冒泡排序</h3>

<strong>在冒泡排序中，核心思想就是逐次比较，在比较的过程中保留较大值（或较小值），然后将该值保留移动至最左边（或最右边）---模拟水泡因为重量太轻（其实是压强）的缘故一直往上漂的过程</strong>

<ul>
<li>从过程中发现它的复杂度为O(n2)，n个数n次循环（准确来讲应从实际的数学来判断）</li>
<li><p>冒上去的“水泡”不需要在考虑了</p></li>
<li><p>具体一类算法如下 <a href="https://blog.csdn.net/yangchuang93/article/details/80858054" title="https://blog.csdn.net/yangchuang93/article/details/80858054">https://blog.csdn.net/yangchuang93/article/details/80858054</a></p></li>
</ul>

<pre><code class="language-cpp ">#include&lt;iostream&gt;
using namespace std;

void print(int arr[], int n)
{  
    for(int j= 0; j&lt;n; j++)
    {  
           cout&lt;&lt;arr[j] &lt;&lt;"  ";  
        }  
    cout&lt;&lt;endl;  
}  

void BubbleSort(int arr[], int n)
{
    for (int i = 0; i &lt; n - 1; i++)
    {
            for (int j = 0; j &lt; n - i - 1; j++)
            {
                    if (arr[j] &gt; arr[j + 1]) 
            {
                            int temp = arr[j];
                            arr[j] = arr[j + 1];
                            arr[j + 1] = temp;
                        }
                 }
         }
}

int main()
{  
    int s[10] = {8,1,9,7,2,4,5,6,10,3};  
    cout&lt;&lt;"初始序列：";  
    print(s,10);  
    BubbleSort(s,10);  
    cout&lt;&lt;"排序结果：";  
    print(s,10);  
    system("pause"); 
} 

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2020-01-08 20:47:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-08 12:47:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f"><![CDATA[冒泡排序]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[dmeng_copyright_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[原文链接：&lt;a href=&quot;{link}&quot; rel=&quot;author&quot;&gt;{title}&lt;/a&gt;，转发请注明来源！]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
		<wp:meta_value><![CDATA[1578487731]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e5%86%92%e6%b3%a1%e6%8e%92%e5%ba%8f%e5%8e%9f%e7%90%86]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	